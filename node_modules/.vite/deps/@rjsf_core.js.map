{
  "version": 3,
  "sources": ["../../lodash/_basePickBy.js", "../../lodash/_basePick.js", "../../lodash/pick.js", "../../lodash/unset.js", "../../@rjsf/core/src/components/Form.tsx", "../../@rjsf/core/src/components/fields/ArrayField.tsx", "../../nanoid/index.browser.js", "../../@rjsf/core/src/components/fields/BooleanField.tsx", "../../@rjsf/core/src/components/fields/MultiSchemaField.tsx", "../../@rjsf/core/src/components/fields/NumberField.tsx", "../../@rjsf/core/src/components/fields/ObjectField.tsx", "../../markdown-to-jsx/index.tsx", "../../@rjsf/core/src/components/fields/SchemaField.tsx", "../../@rjsf/core/src/components/fields/StringField.tsx", "../../@rjsf/core/src/components/fields/NullField.tsx", "../../@rjsf/core/src/components/fields/index.ts", "../../@rjsf/core/src/components/templates/ArrayFieldDescriptionTemplate.tsx", "../../@rjsf/core/src/components/templates/ArrayFieldItemTemplate.tsx", "../../@rjsf/core/src/components/templates/ArrayFieldTemplate.tsx", "../../@rjsf/core/src/components/templates/ArrayFieldTitleTemplate.tsx", "../../@rjsf/core/src/components/templates/BaseInputTemplate.tsx", "../../@rjsf/core/src/components/templates/ButtonTemplates/SubmitButton.tsx", "../../@rjsf/core/src/components/templates/ButtonTemplates/IconButton.tsx", "../../@rjsf/core/src/components/templates/ButtonTemplates/AddButton.tsx", "../../@rjsf/core/src/components/templates/ButtonTemplates/index.ts", "../../@rjsf/core/src/components/templates/DescriptionField.tsx", "../../@rjsf/core/src/components/templates/ErrorList.tsx", "../../@rjsf/core/src/components/templates/FieldTemplate/Label.tsx", "../../@rjsf/core/src/components/templates/FieldTemplate/FieldTemplate.tsx", "../../@rjsf/core/src/components/templates/FieldTemplate/index.ts", "../../@rjsf/core/src/components/templates/FieldErrorTemplate.tsx", "../../@rjsf/core/src/components/templates/FieldHelpTemplate.tsx", "../../@rjsf/core/src/components/templates/ObjectFieldTemplate.tsx", "../../@rjsf/core/src/components/templates/TitleField.tsx", "../../@rjsf/core/src/components/templates/UnsupportedField.tsx", "../../@rjsf/core/src/components/templates/WrapIfAdditionalTemplate.tsx", "../../@rjsf/core/src/components/templates/index.ts", "../../@rjsf/core/src/components/widgets/AltDateWidget.tsx", "../../@rjsf/core/src/components/widgets/AltDateTimeWidget.tsx", "../../@rjsf/core/src/components/widgets/CheckboxWidget.tsx", "../../@rjsf/core/src/components/widgets/CheckboxesWidget.tsx", "../../@rjsf/core/src/components/widgets/ColorWidget.tsx", "../../@rjsf/core/src/components/widgets/DateWidget.tsx", "../../@rjsf/core/src/components/widgets/DateTimeWidget.tsx", "../../@rjsf/core/src/components/widgets/EmailWidget.tsx", "../../@rjsf/core/src/components/widgets/FileWidget.tsx", "../../@rjsf/core/src/components/widgets/HiddenWidget.tsx", "../../@rjsf/core/src/components/widgets/PasswordWidget.tsx", "../../@rjsf/core/src/components/widgets/RadioWidget.tsx", "../../@rjsf/core/src/components/widgets/RangeWidget.tsx", "../../@rjsf/core/src/components/widgets/SelectWidget.tsx", "../../@rjsf/core/src/components/widgets/TextareaWidget.tsx", "../../@rjsf/core/src/components/widgets/TextWidget.tsx", "../../@rjsf/core/src/components/widgets/TimeWidget.tsx", "../../@rjsf/core/src/components/widgets/URLWidget.tsx", "../../@rjsf/core/src/components/widgets/UpDownWidget.tsx", "../../@rjsf/core/src/components/widgets/index.ts", "../../@rjsf/core/src/getDefaultRegistry.ts", "../../@rjsf/core/src/withTheme.tsx", "../../@rjsf/core/src/index.ts"],
  "sourcesContent": ["var baseGet = require('./_baseGet'),\n    baseSet = require('./_baseSet'),\n    castPath = require('./_castPath');\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, paths, predicate) {\n  var index = -1,\n      length = paths.length,\n      result = {};\n\n  while (++index < length) {\n    var path = paths[index],\n        value = baseGet(object, path);\n\n    if (predicate(value, path)) {\n      baseSet(result, castPath(path, object), value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = basePickBy;\n", "var basePickBy = require('./_basePickBy'),\n    hasIn = require('./hasIn');\n\n/**\n * The base implementation of `_.pick` without support for individual\n * property identifiers.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @returns {Object} Returns the new object.\n */\nfunction basePick(object, paths) {\n  return basePickBy(object, paths, function(value, path) {\n    return hasIn(object, path);\n  });\n}\n\nmodule.exports = basePick;\n", "var basePick = require('./_basePick'),\n    flatRest = require('./_flatRest');\n\n/**\n * Creates an object composed of the picked `object` properties.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to pick.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pick(object, ['a', 'c']);\n * // => { 'a': 1, 'c': 3 }\n */\nvar pick = flatRest(function(object, paths) {\n  return object == null ? {} : basePick(object, paths);\n});\n\nmodule.exports = pick;\n", "var baseUnset = require('./_baseUnset');\n\n/**\n * Removes the property at `path` of `object`.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to unset.\n * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n * _.unset(object, 'a[0].b.c');\n * // => true\n *\n * console.log(object);\n * // => { 'a': [{ 'b': {} }] };\n *\n * _.unset(object, ['a', '0', 'b', 'c']);\n * // => true\n *\n * console.log(object);\n * // => { 'a': [{ 'b': {} }] };\n */\nfunction unset(object, path) {\n  return object == null ? true : baseUnset(object, path);\n}\n\nmodule.exports = unset;\n", "import { Component, ElementType, FormEvent, ReactNode, Ref, RefObject, createRef } from 'react';\nimport {\n  createSchemaUtils,\n  CustomValidator,\n  deepEquals,\n  ErrorSchema,\n  ErrorTransformer,\n  FormContextType,\n  GenericObjectType,\n  getTemplate,\n  getUiOptions,\n  IdSchema,\n  isObject,\n  mergeObjects,\n  NAME_KEY,\n  PathSchema,\n  StrictRJSFSchema,\n  Registry,\n  RegistryFieldsType,\n  RegistryWidgetsType,\n  RJSFSchema,\n  RJSFValidationError,\n  RJSF_ADDITIONAL_PROPERTIES_FLAG,\n  SchemaUtilsType,\n  shouldRender,\n  SUBMIT_BTN_OPTIONS_KEY,\n  TemplatesType,\n  toErrorList,\n  UiSchema,\n  UI_GLOBAL_OPTIONS_KEY,\n  UI_OPTIONS_KEY,\n  ValidationData,\n  validationDataMerge,\n  ValidatorType,\n  Experimental_DefaultFormStateBehavior,\n  Experimental_CustomMergeAllOf,\n} from '@rjsf/utils';\nimport _forEach from 'lodash/forEach';\nimport _get from 'lodash/get';\nimport _isEmpty from 'lodash/isEmpty';\nimport _isNil from 'lodash/isNil';\nimport _pick from 'lodash/pick';\nimport _toPath from 'lodash/toPath';\n\nimport getDefaultRegistry from '../getDefaultRegistry';\n\n/** The properties that are passed to the `Form` */\nexport interface FormProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> {\n  /** The JSON schema object for the form */\n  schema: S;\n  /** An implementation of the `ValidatorType` interface that is needed for form validation to work */\n  validator: ValidatorType<T, S, F>;\n  /** The optional children for the form, if provided, it will replace the default `SubmitButton` */\n  children?: ReactNode;\n  /** The uiSchema for the form */\n  uiSchema?: UiSchema<T, S, F>;\n  /** The data for the form, used to prefill a form with existing data */\n  formData?: T;\n  // Form presentation and behavior modifiers\n  /** You can provide a `formContext` object to the form, which is passed down to all fields and widgets. Useful for\n   * implementing context aware fields and widgets.\n   *\n   * NOTE: Setting `{readonlyAsDisabled: false}` on the formContext will make the antd theme treat readOnly fields as\n   * disabled.\n   */\n  formContext?: F;\n  /** To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids;\n   * Default is `root`\n   */\n  idPrefix?: string;\n  /** To avoid using a path separator that is present in field names, it is possible to change the separator used for\n   * ids (Default is `_`)\n   */\n  idSeparator?: string;\n  /** It's possible to disable the whole form by setting the `disabled` prop. The `disabled` prop is then forwarded down\n   * to each field of the form. If you just want to disable some fields, see the `ui:disabled` parameter in `uiSchema`\n   */\n  disabled?: boolean;\n  /** It's possible to make the whole form read-only by setting the `readonly` prop. The `readonly` prop is then\n   * forwarded down to each field of the form. If you just want to make some fields read-only, see the `ui:readonly`\n   * parameter in `uiSchema`\n   */\n  readonly?: boolean;\n  // Form registry\n  /** The dictionary of registered fields in the form */\n  fields?: RegistryFieldsType<T, S, F>;\n  /** The dictionary of registered templates in the form; Partial allows a subset to be provided beyond the defaults */\n  templates?: Partial<Omit<TemplatesType<T, S, F>, 'ButtonTemplates'>> & {\n    ButtonTemplates?: Partial<TemplatesType<T, S, F>['ButtonTemplates']>;\n  };\n  /** The dictionary of registered widgets in the form */\n  widgets?: RegistryWidgetsType<T, S, F>;\n  // Callbacks\n  /** If you plan on being notified every time the form data are updated, you can pass an `onChange` handler, which will\n   * receive the same args as `onSubmit` any time a value is updated in the form. Can also return the `id` of the field\n   * that caused the change\n   */\n  onChange?: (data: IChangeEvent<T, S, F>, id?: string) => void;\n  /** To react when submitted form data are invalid, pass an `onError` handler. It will be passed the list of\n   * encountered errors\n   */\n  onError?: (errors: RJSFValidationError[]) => void;\n  /** You can pass a function as the `onSubmit` prop of your `Form` component to listen to when the form is submitted\n   * and its data are valid. It will be passed a result object having a `formData` attribute, which is the valid form\n   * data you're usually after. The original event will also be passed as a second parameter\n   */\n  onSubmit?: (data: IChangeEvent<T, S, F>, event: FormEvent<any>) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been touched, so you can pass\n   * an `onBlur` handler, which will receive the id of the input that was blurred and the field value\n   */\n  onBlur?: (id: string, data: any) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been focused, so you can pass\n   * an `onFocus` handler, which will receive the id of the input that is focused and the field value\n   */\n  onFocus?: (id: string, data: any) => void;\n  // <form /> HTML attributes\n  /** The value of this prop will be passed to the `accept-charset` HTML attribute on the form\n   * @deprecated replaced with `acceptCharset` which will supercede this value if both are specified\n   */\n  acceptcharset?: string;\n  /** The value of this prop will be passed to the `accept-charset` HTML attribute on the form */\n  acceptCharset?: string;\n  /** The value of this prop will be passed to the `action` HTML attribute on the form\n   *\n   * NOTE: this just renders the `action` attribute in the HTML markup. There is no real network request being sent to\n   * this `action` on submit. Instead, react-jsonschema-form catches the submit event with `event.preventDefault()`\n   * and then calls the `onSubmit` function, where you could send a request programmatically with `fetch` or similar.\n   */\n  action?: string;\n  /** The value of this prop will be passed to the `autocomplete` HTML attribute on the form */\n  autoComplete?: string;\n  /** The value of this prop will be passed to the `class` HTML attribute on the form */\n  className?: string;\n  /** The value of this prop will be passed to the `enctype` HTML attribute on the form */\n  enctype?: string;\n  /** The value of this prop will be passed to the `id` HTML attribute on the form */\n  id?: string;\n  /** The value of this prop will be passed to the `name` HTML attribute on the form */\n  name?: string;\n  /** The value of this prop will be passed to the `method` HTML attribute on the form */\n  method?: string;\n  /** It's possible to change the default `form` tag name to a different HTML tag, which can be helpful if you are\n   * nesting forms. However, native browser form behaviour, such as submitting when the `Enter` key is pressed, may no\n   * longer work\n   */\n  tagName?: ElementType;\n  /** The value of this prop will be passed to the `target` HTML attribute on the form */\n  target?: string;\n  // Errors and validation\n  /** Formerly the `validate` prop; Takes a function that specifies custom validation rules for the form */\n  customValidate?: CustomValidator<T, S, F>;\n  /** This prop allows passing in custom errors that are augmented with the existing JSON Schema errors on the form; it\n   * can be used to implement asynchronous validation. By default, these are non-blocking errors, meaning that you can\n   * still submit the form when these are the only errors displayed to the user.\n   */\n  extraErrors?: ErrorSchema<T>;\n  /** If set to true, causes the `extraErrors` to become blocking when the form is submitted */\n  extraErrorsBlockSubmit?: boolean;\n  /** If set to true, turns off HTML5 validation on the form; Set to `false` by default */\n  noHtml5Validate?: boolean;\n  /** If set to true, turns off all validation. Set to `false` by default\n   *\n   * @deprecated - In a future release, this switch may be replaced by making `validator` prop optional\n   */\n  noValidate?: boolean;\n  /** If set to true, the form will perform validation and show any validation errors whenever the form data is changed,\n   * rather than just on submit\n   */\n  liveValidate?: boolean;\n  /** If `omitExtraData` and `liveOmit` are both set to true, then extra form data values that are not in any form field\n   * will be removed whenever `onChange` is called. Set to `false` by default\n   */\n  liveOmit?: boolean;\n  /** If set to true, then extra form data values that are not in any form field will be removed whenever `onSubmit` is\n   * called. Set to `false` by default.\n   */\n  omitExtraData?: boolean;\n  /** When this prop is set to `top` or 'bottom', a list of errors (or the custom error list defined in the `ErrorList`) will also\n   * show. When set to false, only inline input validation errors will be shown. Set to `top` by default\n   */\n  showErrorList?: false | 'top' | 'bottom';\n  /** A function can be passed to this prop in order to make modifications to the default errors resulting from JSON\n   * Schema validation\n   */\n  transformErrors?: ErrorTransformer<T, S, F>;\n  /** If set to true, then the first field with an error will receive the focus when the form is submitted with errors\n   */\n  focusOnFirstError?: boolean | ((error: RJSFValidationError) => void);\n  /** Optional string translation function, if provided, allows users to change the translation of the RJSF internal\n   * strings. Some strings contain replaceable parameter values as indicated by `%1`, `%2`, etc. The number after the\n   * `%` indicates the order of the parameter. The ordering of parameters is important because some languages may choose\n   * to put the second parameter before the first in its translation.\n   */\n  translateString?: Registry['translateString'];\n  /** Optional configuration object with flags, if provided, allows users to override default form state behavior\n   * Currently only affecting minItems on array fields and handling of setting defaults based on the value of\n   * `emptyObjectFields`\n   */\n  experimental_defaultFormStateBehavior?: Experimental_DefaultFormStateBehavior;\n  /** Optional function that allows for custom merging of `allOf` schemas\n   */\n  experimental_customMergeAllOf?: Experimental_CustomMergeAllOf<S>;\n  // Private\n  /**\n   * _internalFormWrapper is currently used by the semantic-ui theme to provide a custom wrapper around `<Form />`\n   * that supports the proper rendering of those themes. To use this prop, one must pass a component that takes two\n   * props: `children` and `as`. That component, at minimum, should render the `children` inside of a <form /> tag\n   * unless `as` is provided, in which case, use the `as` prop in place of `<form />`.\n   * i.e.:\n   * ```\n   * export default function InternalForm({ children, as }) {\n   *   const FormTag = as || 'form';\n   *   return <FormTag>{children}</FormTag>;\n   * }\n   * ```\n   *\n   * Use at your own risk as this prop is private and may change at any time without notice.\n   */\n  _internalFormWrapper?: ElementType;\n  /** Support receiving a React ref to the Form\n   */\n  ref?: Ref<Form<T, S, F>>;\n}\n\n/** The data that is contained within the state for the `Form` */\nexport interface FormState<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> {\n  /** The JSON schema object for the form */\n  schema: S;\n  /** The uiSchema for the form */\n  uiSchema: UiSchema<T, S, F>;\n  /** The `IdSchema` for the form, computed from the `schema`, the `rootFieldId`, the `formData` and the `idPrefix` and\n   * `idSeparator` props.\n   */\n  idSchema: IdSchema<T>;\n  /** The schemaUtils implementation used by the `Form`, created from the `validator` and the `schema` */\n  schemaUtils: SchemaUtilsType<T, S, F>;\n  /** The current data for the form, computed from the `formData` prop and the changes made by the user */\n  formData?: T;\n  /** Flag indicating whether the form is in edit mode, true when `formData` is passed to the form, otherwise false */\n  edit: boolean;\n  /** The current list of errors for the form, includes `extraErrors` */\n  errors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form, includes `extraErrors` */\n  errorSchema: ErrorSchema<T>;\n  /** The current list of errors for the form directly from schema validation, does NOT include `extraErrors` */\n  schemaValidationErrors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form directly from schema validation, does NOT include\n   * `extraErrors`\n   */\n  schemaValidationErrorSchema: ErrorSchema<T>;\n  // Private\n  /** @description result of schemaUtils.retrieveSchema(schema, formData). This a memoized value to avoid re calculate at internal functions (getStateFromProps, onChange) */\n  retrievedSchema: S;\n}\n\n/** The event data passed when changes have been made to the form, includes everything from the `FormState` except\n * the schema validation errors. An additional `status` is added when returned from `onSubmit`\n */\nexport interface IChangeEvent<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>\n  extends Omit<FormState<T, S, F>, 'schemaValidationErrors' | 'schemaValidationErrorSchema'> {\n  /** The status of the form when submitted */\n  status?: 'submitted';\n}\n\n/** The `Form` component renders the outer form and all the fields defined in the `schema` */\nexport default class Form<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Component<FormProps<T, S, F>, FormState<T, S, F>> {\n  /** The ref used to hold the `form` element, this needs to be `any` because `tagName` or `_internalFormWrapper` can\n   * provide any possible type here\n   */\n  formElement: RefObject<any>;\n\n  /** Constructs the `Form` from the `props`. Will setup the initial state from the props. It will also call the\n   * `onChange` handler if the initially provided `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param props - The initial props for the `Form`\n   */\n  constructor(props: FormProps<T, S, F>) {\n    super(props);\n\n    if (!props.validator) {\n      throw new Error('A validator is required for Form functionality to work');\n    }\n\n    this.state = this.getStateFromProps(props, props.formData);\n    if (this.props.onChange && !deepEquals(this.state.formData, this.props.formData)) {\n      this.props.onChange(this.state);\n    }\n    this.formElement = createRef();\n  }\n\n  /**\n   * `getSnapshotBeforeUpdate` is a React lifecycle method that is invoked right before the most recently rendered\n   * output is committed to the DOM. It enables your component to capture current values (e.g., scroll position) before\n   * they are potentially changed.\n   *\n   * In this case, it checks if the props have changed since the last render. If they have, it computes the next state\n   * of the component using `getStateFromProps` method and returns it along with a `shouldUpdate` flag set to `true` IF\n   * the `nextState` and `prevState` are different, otherwise `false`. This ensures that we have the most up-to-date\n   * state ready to be applied in `componentDidUpdate`.\n   *\n   * If `formData` hasn't changed, it simply returns an object with `shouldUpdate` set to `false`, indicating that a\n   * state update is not necessary.\n   *\n   * @param prevProps - The previous set of props before the update.\n   * @param prevState - The previous state before the update.\n   * @returns Either an object containing the next state and a flag indicating that an update should occur, or an object\n   *        with a flag indicating that an update is not necessary.\n   */\n  getSnapshotBeforeUpdate(\n    prevProps: FormProps<T, S, F>,\n    prevState: FormState<T, S, F>\n  ): { nextState: FormState<T, S, F>; shouldUpdate: true } | { shouldUpdate: false } {\n    if (!deepEquals(this.props, prevProps)) {\n      const isSchemaChanged = !deepEquals(prevProps.schema, this.props.schema);\n      const isFormDataChanged = !deepEquals(prevProps.formData, this.props.formData);\n      const nextState = this.getStateFromProps(\n        this.props,\n        this.props.formData,\n        // If the `schema` has changed, we need to update the retrieved schema.\n        // Or if the `formData` changes, for example in the case of a schema with dependencies that need to\n        //  match one of the subSchemas, the retrieved schema must be updated.\n        isSchemaChanged || isFormDataChanged ? undefined : this.state.retrievedSchema,\n        isSchemaChanged\n      );\n      const shouldUpdate = !deepEquals(nextState, prevState);\n      return { nextState, shouldUpdate };\n    }\n    return { shouldUpdate: false };\n  }\n\n  /**\n   * `componentDidUpdate` is a React lifecycle method that is invoked immediately after updating occurs. This method is\n   * not called for the initial render.\n   *\n   * Here, it checks if an update is necessary based on the `shouldUpdate` flag received from `getSnapshotBeforeUpdate`.\n   * If an update is required, it applies the next state and, if needed, triggers the `onChange` handler to inform about\n   * changes.\n   *\n   * This method effectively replaces the deprecated `UNSAFE_componentWillReceiveProps`, providing a safer alternative\n   * to handle prop changes and state updates.\n   *\n   * @param _ - The previous set of props.\n   * @param prevState - The previous state of the component before the update.\n   * @param snapshot - The value returned from `getSnapshotBeforeUpdate`.\n   */\n  componentDidUpdate(\n    _: FormProps<T, S, F>,\n    prevState: FormState<T, S, F>,\n    snapshot: { nextState: FormState<T, S, F>; shouldUpdate: true } | { shouldUpdate: false }\n  ) {\n    if (snapshot.shouldUpdate) {\n      const { nextState } = snapshot;\n\n      if (\n        !deepEquals(nextState.formData, this.props.formData) &&\n        !deepEquals(nextState.formData, prevState.formData) &&\n        this.props.onChange\n      ) {\n        this.props.onChange(nextState);\n      }\n      this.setState(nextState);\n    }\n  }\n\n  /** Extracts the updated state from the given `props` and `inputFormData`. As part of this process, the\n   * `inputFormData` is first processed to add any missing required defaults. After that, the data is run through the\n   * validation process IF required by the `props`.\n   *\n   * @param props - The props passed to the `Form`\n   * @param inputFormData - The new or current data for the `Form`\n   * @param retrievedSchema - An expanded schema, if not provided, it will be retrieved from the `schema` and `formData`.\n   * @param isSchemaChanged - A flag indicating whether the schema has changed.\n   * @returns - The new state for the `Form`\n   */\n  getStateFromProps(\n    props: FormProps<T, S, F>,\n    inputFormData?: T,\n    retrievedSchema?: S,\n    isSchemaChanged = false\n  ): FormState<T, S, F> {\n    const state: FormState<T, S, F> = this.state || {};\n    const schema = 'schema' in props ? props.schema : this.props.schema;\n    const uiSchema: UiSchema<T, S, F> = ('uiSchema' in props ? props.uiSchema! : this.props.uiSchema!) || {};\n    const edit = typeof inputFormData !== 'undefined';\n    const liveValidate = 'liveValidate' in props ? props.liveValidate : this.props.liveValidate;\n    const mustValidate = edit && !props.noValidate && liveValidate;\n    const rootSchema = schema;\n    const experimental_defaultFormStateBehavior =\n      'experimental_defaultFormStateBehavior' in props\n        ? props.experimental_defaultFormStateBehavior\n        : this.props.experimental_defaultFormStateBehavior;\n    const experimental_customMergeAllOf =\n      'experimental_customMergeAllOf' in props\n        ? props.experimental_customMergeAllOf\n        : this.props.experimental_customMergeAllOf;\n    let schemaUtils: SchemaUtilsType<T, S, F> = state.schemaUtils;\n    if (\n      !schemaUtils ||\n      schemaUtils.doesSchemaUtilsDiffer(\n        props.validator,\n        rootSchema,\n        experimental_defaultFormStateBehavior,\n        experimental_customMergeAllOf\n      )\n    ) {\n      schemaUtils = createSchemaUtils<T, S, F>(\n        props.validator,\n        rootSchema,\n        experimental_defaultFormStateBehavior,\n        experimental_customMergeAllOf\n      );\n    }\n    const formData: T = schemaUtils.getDefaultFormState(schema, inputFormData) as T;\n    const _retrievedSchema = retrievedSchema ?? schemaUtils.retrieveSchema(schema, formData);\n\n    const getCurrentErrors = (): ValidationData<T> => {\n      // If the `props.noValidate` option is set or the schema has changed, we reset the error state.\n      if (props.noValidate || isSchemaChanged) {\n        return { errors: [], errorSchema: {} };\n      } else if (!props.liveValidate) {\n        return {\n          errors: state.schemaValidationErrors || [],\n          errorSchema: state.schemaValidationErrorSchema || {},\n        };\n      }\n      return {\n        errors: state.errors || [],\n        errorSchema: state.errorSchema || {},\n      };\n    };\n\n    let errors: RJSFValidationError[];\n    let errorSchema: ErrorSchema<T> | undefined;\n    let schemaValidationErrors: RJSFValidationError[] = state.schemaValidationErrors;\n    let schemaValidationErrorSchema: ErrorSchema<T> = state.schemaValidationErrorSchema;\n    if (mustValidate) {\n      const schemaValidation = this.validate(formData, schema, schemaUtils, _retrievedSchema);\n      errors = schemaValidation.errors;\n      // If retrievedSchema is undefined which means the schema or formData has changed, we do not merge state.\n      // Else in the case where it hasn't changed, we merge 'state.errorSchema' with 'schemaValidation.errorSchema.' This done to display the raised field error.\n      if (retrievedSchema === undefined) {\n        errorSchema = schemaValidation.errorSchema;\n      } else {\n        errorSchema = mergeObjects(\n          this.state?.errorSchema,\n          schemaValidation.errorSchema,\n          'preventDuplicates'\n        ) as ErrorSchema<T>;\n      }\n      schemaValidationErrors = errors;\n      schemaValidationErrorSchema = errorSchema;\n    } else {\n      const currentErrors = getCurrentErrors();\n      errors = currentErrors.errors;\n      errorSchema = currentErrors.errorSchema;\n    }\n    if (props.extraErrors) {\n      const merged = validationDataMerge({ errorSchema, errors }, props.extraErrors);\n      errorSchema = merged.errorSchema;\n      errors = merged.errors;\n    }\n    const idSchema = schemaUtils.toIdSchema(\n      _retrievedSchema,\n      uiSchema['ui:rootFieldId'],\n      formData,\n      props.idPrefix,\n      props.idSeparator\n    );\n    const nextState: FormState<T, S, F> = {\n      schemaUtils,\n      schema,\n      uiSchema,\n      idSchema,\n      formData,\n      edit,\n      errors,\n      errorSchema,\n      schemaValidationErrors,\n      schemaValidationErrorSchema,\n      retrievedSchema: _retrievedSchema,\n    };\n    return nextState;\n  }\n\n  /** React lifecycle method that is used to determine whether component should be updated.\n   *\n   * @param nextProps - The next version of the props\n   * @param nextState - The next version of the state\n   * @returns - True if the component should be updated, false otherwise\n   */\n  shouldComponentUpdate(nextProps: FormProps<T, S, F>, nextState: FormState<T, S, F>): boolean {\n    return shouldRender(this, nextProps, nextState);\n  }\n\n  /** Validates the `formData` against the `schema` using the `altSchemaUtils` (if provided otherwise it uses the\n   * `schemaUtils` in the state), returning the results.\n   *\n   * @param formData - The new form data to validate\n   * @param schema - The schema used to validate against\n   * @param altSchemaUtils - The alternate schemaUtils to use for validation\n   */\n  validate(\n    formData: T | undefined,\n    schema = this.props.schema,\n    altSchemaUtils?: SchemaUtilsType<T, S, F>,\n    retrievedSchema?: S\n  ): ValidationData<T> {\n    const schemaUtils = altSchemaUtils ? altSchemaUtils : this.state.schemaUtils;\n    const { customValidate, transformErrors, uiSchema } = this.props;\n    const resolvedSchema = retrievedSchema ?? schemaUtils.retrieveSchema(schema, formData);\n    return schemaUtils\n      .getValidator()\n      .validateFormData(formData, resolvedSchema, customValidate, transformErrors, uiSchema);\n  }\n\n  /** Renders any errors contained in the `state` in using the `ErrorList`, if not disabled by `showErrorList`. */\n  renderErrors(registry: Registry<T, S, F>) {\n    const { errors, errorSchema, schema, uiSchema } = this.state;\n    const { formContext } = this.props;\n    const options = getUiOptions<T, S, F>(uiSchema);\n    const ErrorListTemplate = getTemplate<'ErrorListTemplate', T, S, F>('ErrorListTemplate', registry, options);\n\n    if (errors && errors.length) {\n      return (\n        <ErrorListTemplate\n          errors={errors}\n          errorSchema={errorSchema || {}}\n          schema={schema}\n          uiSchema={uiSchema}\n          formContext={formContext}\n          registry={registry}\n        />\n      );\n    }\n    return null;\n  }\n\n  /** Returns the `formData` with only the elements specified in the `fields` list\n   *\n   * @param formData - The data for the `Form`\n   * @param fields - The fields to keep while filtering\n   */\n  getUsedFormData = (formData: T | undefined, fields: string[][]): T | undefined => {\n    // For the case of a single input form\n    if (fields.length === 0 && typeof formData !== 'object') {\n      return formData;\n    }\n\n    // _pick has incorrect type definition, it works with string[][], because lodash/hasIn supports it\n    const data: GenericObjectType = _pick(formData, fields as unknown as string[]);\n    if (Array.isArray(formData)) {\n      return Object.keys(data).map((key: string) => data[key]) as unknown as T;\n    }\n\n    return data as T;\n  };\n\n  /** Returns the list of field names from inspecting the `pathSchema` as well as using the `formData`\n   *\n   * @param pathSchema - The `PathSchema` object for the form\n   * @param [formData] - The form data to use while checking for empty objects/arrays\n   */\n  getFieldNames = (pathSchema: PathSchema<T>, formData?: T): string[][] => {\n    const getAllPaths = (_obj: GenericObjectType, acc: string[][] = [], paths: string[][] = [[]]) => {\n      Object.keys(_obj).forEach((key: string) => {\n        if (typeof _obj[key] === 'object') {\n          const newPaths = paths.map((path) => [...path, key]);\n          // If an object is marked with additionalProperties, all its keys are valid\n          if (_obj[key][RJSF_ADDITIONAL_PROPERTIES_FLAG] && _obj[key][NAME_KEY] !== '') {\n            acc.push(_obj[key][NAME_KEY]);\n          } else {\n            getAllPaths(_obj[key], acc, newPaths);\n          }\n        } else if (key === NAME_KEY && _obj[key] !== '') {\n          paths.forEach((path) => {\n            const formValue = _get(formData, path);\n            // adds path to fieldNames if it points to a value\n            // or an empty object/array\n            if (\n              typeof formValue !== 'object' ||\n              _isEmpty(formValue) ||\n              (Array.isArray(formValue) && formValue.every((val) => typeof val !== 'object'))\n            ) {\n              acc.push(path);\n            }\n          });\n        }\n      });\n      return acc;\n    };\n\n    return getAllPaths(pathSchema);\n  };\n\n  /** Returns the `formData` after filtering to remove any extra data not in a form field\n   *\n   * @param formData - The data for the `Form`\n   * @returns The `formData` after omitting extra data\n   */\n  omitExtraData = (formData?: T): T | undefined => {\n    const { schema, schemaUtils } = this.state;\n    const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n    const pathSchema = schemaUtils.toPathSchema(retrievedSchema, '', formData);\n    const fieldNames = this.getFieldNames(pathSchema, formData);\n    const newFormData = this.getUsedFormData(formData, fieldNames);\n    return newFormData;\n  };\n\n  // Filtering errors based on your retrieved schema to only show errors for properties in the selected branch.\n  private filterErrorsBasedOnSchema(schemaErrors: ErrorSchema<T>, resolvedSchema?: S, formData?: any): ErrorSchema<T> {\n    const { retrievedSchema, schemaUtils } = this.state;\n    const _retrievedSchema = resolvedSchema ?? retrievedSchema;\n    const pathSchema = schemaUtils.toPathSchema(_retrievedSchema, '', formData);\n    const fieldNames = this.getFieldNames(pathSchema, formData);\n    const filteredErrors: ErrorSchema<T> = _pick(schemaErrors, fieldNames as unknown as string[]);\n    // If the root schema is of a primitive type, do not filter out the __errors\n    if (resolvedSchema?.type !== 'object' && resolvedSchema?.type !== 'array') {\n      filteredErrors.__errors = schemaErrors.__errors;\n    }\n    // Removing undefined, null and empty errors.\n    const filterNilOrEmptyErrors = (errors: any): ErrorSchema<T> => {\n      _forEach(errors, (errorAtKey, errorKey: keyof typeof errors) => {\n        if (_isNil(errorAtKey)) {\n          delete errors[errorKey];\n        } else if (typeof errorAtKey === 'object' && !Array.isArray(errorAtKey.__errors)) {\n          filterNilOrEmptyErrors(errorAtKey);\n        }\n      });\n      return errors;\n    };\n    return filterNilOrEmptyErrors(filteredErrors);\n  }\n\n  /** Function to handle changes made to a field in the `Form`. This handler receives an entirely new copy of the\n   * `formData` along with a new `ErrorSchema`. It will first update the `formData` with any missing default fields and\n   * then, if `omitExtraData` and `liveOmit` are turned on, the `formData` will be filtered to remove any extra data not\n   * in a form field. Then, the resulting formData will be validated if required. The state will be updated with the new\n   * updated (potentially filtered) `formData`, any errors that resulted from validation. Finally the `onChange`\n   * callback will be called if specified with the updated state.\n   *\n   * @param formData - The new form data from a change to a field\n   * @param newErrorSchema - The new `ErrorSchema` based on the field change\n   * @param id - The id of the field that caused the change\n   */\n  onChange = (formData: T | undefined, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n    const { extraErrors, omitExtraData, liveOmit, noValidate, liveValidate, onChange } = this.props;\n    const { schemaUtils, schema, retrievedSchema } = this.state;\n\n    if (isObject(formData) || Array.isArray(formData)) {\n      const newState = this.getStateFromProps(this.props, formData, retrievedSchema);\n      formData = newState.formData;\n    }\n\n    const mustValidate = !noValidate && liveValidate;\n    let state: Partial<FormState<T, S, F>> = { formData, schema };\n    let newFormData = formData;\n\n    if (omitExtraData === true && liveOmit === true) {\n      newFormData = this.omitExtraData(formData);\n      state = {\n        formData: newFormData,\n      };\n    }\n\n    if (mustValidate) {\n      const schemaValidation = this.validate(newFormData, schema, schemaUtils, retrievedSchema);\n      let errors = schemaValidation.errors;\n      let errorSchema = schemaValidation.errorSchema;\n      const schemaValidationErrors = errors;\n      const schemaValidationErrorSchema = errorSchema;\n      if (extraErrors) {\n        const merged = validationDataMerge(schemaValidation, extraErrors);\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      // Merging 'newErrorSchema' into 'errorSchema' to display the custom raised errors.\n      if (newErrorSchema) {\n        const filteredErrors = this.filterErrorsBasedOnSchema(newErrorSchema, retrievedSchema, newFormData);\n        errorSchema = mergeObjects(errorSchema, filteredErrors, 'preventDuplicates') as ErrorSchema<T>;\n      }\n      state = {\n        formData: newFormData,\n        errors,\n        errorSchema,\n        schemaValidationErrors,\n        schemaValidationErrorSchema,\n      };\n    } else if (!noValidate && newErrorSchema) {\n      const errorSchema = extraErrors\n        ? (mergeObjects(newErrorSchema, extraErrors, 'preventDuplicates') as ErrorSchema<T>)\n        : newErrorSchema;\n      state = {\n        formData: newFormData,\n        errorSchema: errorSchema,\n        errors: toErrorList(errorSchema),\n      };\n    }\n    this.setState(state as FormState<T, S, F>, () => onChange && onChange({ ...this.state, ...state }, id));\n  };\n\n  /**\n   * Callback function to handle reset form data.\n   * - Reset all fields with default values.\n   * - Reset validations and errors\n   *\n   */\n  reset = () => {\n    const { onChange } = this.props;\n    const newState = this.getStateFromProps(this.props, undefined);\n    const newFormData = newState.formData;\n    const state = {\n      formData: newFormData,\n      errorSchema: {},\n      errors: [] as unknown,\n      schemaValidationErrors: [] as unknown,\n      schemaValidationErrorSchema: {},\n    } as FormState<T, S, F>;\n\n    this.setState(state, () => onChange && onChange({ ...this.state, ...state }));\n  };\n\n  /** Callback function to handle when a field on the form is blurred. Calls the `onBlur` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was blurred\n   * @param data - The data associated with the field that was blurred\n   */\n  onBlur = (id: string, data: any) => {\n    const { onBlur } = this.props;\n    if (onBlur) {\n      onBlur(id, data);\n    }\n  };\n\n  /** Callback function to handle when a field on the form is focused. Calls the `onFocus` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was focused\n   * @param data - The data associated with the field that was focused\n   */\n  onFocus = (id: string, data: any) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus(id, data);\n    }\n  };\n\n  /** Callback function to handle when the form is submitted. First, it prevents the default event behavior. Nothing\n   * happens if the target and currentTarget of the event are not the same. It will omit any extra data in the\n   * `formData` in the state if `omitExtraData` is true. It will validate the resulting `formData`, reporting errors\n   * via the `onError()` callback unless validation is disabled. Finally, it will add in any `extraErrors` and then call\n   * back the `onSubmit` callback if it was provided.\n   *\n   * @param event - The submit HTML form event\n   */\n  onSubmit = (event: FormEvent<any>) => {\n    event.preventDefault();\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    event.persist();\n    const { omitExtraData, extraErrors, noValidate, onSubmit } = this.props;\n    let { formData: newFormData } = this.state;\n\n    if (omitExtraData === true) {\n      newFormData = this.omitExtraData(newFormData);\n    }\n\n    if (noValidate || this.validateFormWithFormData(newFormData)) {\n      // There are no errors generated through schema validation.\n      // Check for user provided errors and update state accordingly.\n      const errorSchema = extraErrors || {};\n      const errors = extraErrors ? toErrorList(extraErrors) : [];\n      this.setState(\n        {\n          formData: newFormData,\n          errors,\n          errorSchema,\n          schemaValidationErrors: [],\n          schemaValidationErrorSchema: {},\n        },\n        () => {\n          if (onSubmit) {\n            onSubmit({ ...this.state, formData: newFormData, status: 'submitted' }, event);\n          }\n        }\n      );\n    }\n  };\n\n  /** Returns the registry for the form */\n  getRegistry(): Registry<T, S, F> {\n    const { translateString: customTranslateString, uiSchema = {} } = this.props;\n    const { schemaUtils } = this.state;\n    const { fields, templates, widgets, formContext, translateString } = getDefaultRegistry<T, S, F>();\n    return {\n      fields: { ...fields, ...this.props.fields },\n      templates: {\n        ...templates,\n        ...this.props.templates,\n        ButtonTemplates: {\n          ...templates.ButtonTemplates,\n          ...this.props.templates?.ButtonTemplates,\n        },\n      },\n      widgets: { ...widgets, ...this.props.widgets },\n      rootSchema: this.props.schema,\n      formContext: this.props.formContext || formContext,\n      schemaUtils,\n      translateString: customTranslateString || translateString,\n      globalUiOptions: uiSchema[UI_GLOBAL_OPTIONS_KEY],\n    };\n  }\n\n  /** Provides a function that can be used to programmatically submit the `Form` */\n  submit = () => {\n    if (this.formElement.current) {\n      const submitCustomEvent = new CustomEvent('submit', {\n        cancelable: true,\n      });\n      submitCustomEvent.preventDefault();\n      this.formElement.current.dispatchEvent(submitCustomEvent);\n      this.formElement.current.requestSubmit();\n    }\n  };\n\n  /** Attempts to focus on the field associated with the `error`. Uses the `property` field to compute path of the error\n   * field, then, using the `idPrefix` and `idSeparator` converts that path into an id. Then the input element with that\n   * id is attempted to be found using the `formElement` ref. If it is located, then it is focused.\n   *\n   * @param error - The error on which to focus\n   */\n  focusOnError(error: RJSFValidationError) {\n    const { idPrefix = 'root', idSeparator = '_' } = this.props;\n    const { property } = error;\n    const path = _toPath(property);\n    if (path[0] === '') {\n      // Most of the time the `.foo` property results in the first element being empty, so replace it with the idPrefix\n      path[0] = idPrefix;\n    } else {\n      // Otherwise insert the idPrefix into the first location using unshift\n      path.unshift(idPrefix);\n    }\n\n    const elementId = path.join(idSeparator);\n    let field = this.formElement.current.elements[elementId];\n    if (!field) {\n      // if not an exact match, try finding an input starting with the element id (like radio buttons or checkboxes)\n      field = this.formElement.current.querySelector(`input[id^=\"${elementId}\"`);\n    }\n    if (field && field.length) {\n      // If we got a list with length > 0\n      field = field[0];\n    }\n    if (field) {\n      field.focus();\n    }\n  }\n\n  /** Validates the form using the given `formData`. For use on form submission or on programmatic validation.\n   * If `onError` is provided, then it will be called with the list of errors.\n   *\n   * @param formData - The form data to validate\n   * @returns - True if the form is valid, false otherwise.\n   */\n  validateFormWithFormData = (formData?: T): boolean => {\n    const { extraErrors, extraErrorsBlockSubmit, focusOnFirstError, onError } = this.props;\n    const { errors: prevErrors } = this.state;\n    const schemaValidation = this.validate(formData);\n    let errors = schemaValidation.errors;\n    let errorSchema = schemaValidation.errorSchema;\n    const schemaValidationErrors = errors;\n    const schemaValidationErrorSchema = errorSchema;\n    const hasError = errors.length > 0 || (extraErrors && extraErrorsBlockSubmit);\n    if (hasError) {\n      if (extraErrors) {\n        const merged = validationDataMerge(schemaValidation, extraErrors);\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      if (focusOnFirstError) {\n        if (typeof focusOnFirstError === 'function') {\n          focusOnFirstError(errors[0]);\n        } else {\n          this.focusOnError(errors[0]);\n        }\n      }\n      this.setState(\n        {\n          errors,\n          errorSchema,\n          schemaValidationErrors,\n          schemaValidationErrorSchema,\n        },\n        () => {\n          if (onError) {\n            onError(errors);\n          } else {\n            console.error('Form validation failed', errors);\n          }\n        }\n      );\n    } else if (prevErrors.length > 0) {\n      this.setState({\n        errors: [],\n        errorSchema: {},\n        schemaValidationErrors: [],\n        schemaValidationErrorSchema: {},\n      });\n    }\n    return !hasError;\n  };\n\n  /** Programmatically validate the form.  If `omitExtraData` is true, the `formData` will first be filtered to remove\n   * any extra data not in a form field. If `onError` is provided, then it will be called with the list of errors the\n   * same way as would happen on form submission.\n   *\n   * @returns - True if the form is valid, false otherwise.\n   */\n  validateForm() {\n    const { omitExtraData } = this.props;\n    let { formData: newFormData } = this.state;\n    if (omitExtraData === true) {\n      newFormData = this.omitExtraData(newFormData);\n    }\n    return this.validateFormWithFormData(newFormData);\n  }\n\n  /** Renders the `Form` fields inside the <form> | `tagName` or `_internalFormWrapper`, rendering any errors if\n   * needed along with the submit button or any children of the form.\n   */\n  render() {\n    const {\n      children,\n      id,\n      idPrefix,\n      idSeparator,\n      className = '',\n      tagName,\n      name,\n      method,\n      target,\n      action,\n      autoComplete,\n      enctype,\n      acceptcharset,\n      acceptCharset,\n      noHtml5Validate = false,\n      disabled,\n      readonly,\n      formContext,\n      showErrorList = 'top',\n      _internalFormWrapper,\n    } = this.props;\n\n    const { schema, uiSchema, formData, errorSchema, idSchema } = this.state;\n    const registry = this.getRegistry();\n    const { SchemaField: _SchemaField } = registry.fields;\n    const { SubmitButton } = registry.templates.ButtonTemplates;\n    // The `semantic-ui` and `material-ui` themes have `_internalFormWrapper`s that take an `as` prop that is the\n    // PropTypes.elementType to use for the inner tag, so we'll need to pass `tagName` along if it is provided.\n    // NOTE, the `as` prop is native to `semantic-ui` and is emulated in the `material-ui` theme\n    const as = _internalFormWrapper ? tagName : undefined;\n    const FormTag = _internalFormWrapper || tagName || 'form';\n\n    let { [SUBMIT_BTN_OPTIONS_KEY]: submitOptions = {} } = getUiOptions<T, S, F>(uiSchema);\n    if (disabled) {\n      submitOptions = { ...submitOptions, props: { ...submitOptions.props, disabled: true } };\n    }\n    const submitUiSchema = { [UI_OPTIONS_KEY]: { [SUBMIT_BTN_OPTIONS_KEY]: submitOptions } };\n\n    return (\n      <FormTag\n        className={className ? className : 'rjsf'}\n        id={id}\n        name={name}\n        method={method}\n        target={target}\n        action={action}\n        autoComplete={autoComplete}\n        encType={enctype}\n        acceptCharset={acceptCharset || acceptcharset}\n        noValidate={noHtml5Validate}\n        onSubmit={this.onSubmit}\n        as={as}\n        ref={this.formElement}\n      >\n        {showErrorList === 'top' && this.renderErrors(registry)}\n        <_SchemaField\n          name=''\n          schema={schema}\n          uiSchema={uiSchema}\n          errorSchema={errorSchema}\n          idSchema={idSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          formContext={formContext}\n          formData={formData}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n        />\n\n        {children ? children : <SubmitButton uiSchema={submitUiSchema} registry={registry} />}\n        {showErrorList === 'bottom' && this.renderErrors(registry)}\n      </FormTag>\n    );\n  }\n}\n", "import { Component, MouseEvent } from 'react';\nimport {\n  getTemplate,\n  getWidget,\n  getUiOptions,\n  isFixedItems,\n  allowAdditionalItems,\n  isCustomWidget,\n  optionsList,\n  ArrayFieldTemplateProps,\n  ErrorSchema,\n  FieldProps,\n  FormContextType,\n  IdSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  UiSchema,\n  ITEMS_KEY,\n} from '@rjsf/utils';\nimport cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport isObject from 'lodash/isObject';\nimport set from 'lodash/set';\nimport { nanoid } from 'nanoid';\n\n/** Type used to represent the keyed form data used in the state */\ntype KeyedFormDataType<T> = { key: string; item: T };\n\n/** Type used for the state of the `ArrayField` component */\ntype ArrayFieldState<T> = {\n  /** The keyed form data elements */\n  keyedFormData: KeyedFormDataType<T>[];\n  /** Flag indicating whether any of the keyed form data has been updated */\n  updatedKeyedFormData: boolean;\n};\n\n/** Used to generate a unique ID for an element in a row */\nfunction generateRowId() {\n  return nanoid();\n}\n\n/** Converts the `formData` into `KeyedFormDataType` data, using the `generateRowId()` function to create the key\n *\n * @param formData - The data for the form\n * @returns - The `formData` converted into a `KeyedFormDataType` element\n */\nfunction generateKeyedFormData<T>(formData: T[]): KeyedFormDataType<T>[] {\n  return !Array.isArray(formData)\n    ? []\n    : formData.map((item) => {\n        return {\n          key: generateRowId(),\n          item,\n        };\n      });\n}\n\n/** Converts `KeyedFormDataType` data into the inner `formData`\n *\n * @param keyedFormData - The `KeyedFormDataType` to be converted\n * @returns - The inner `formData` item(s) in the `keyedFormData`\n */\nfunction keyedToPlainFormData<T>(keyedFormData: KeyedFormDataType<T> | KeyedFormDataType<T>[]): T[] {\n  if (Array.isArray(keyedFormData)) {\n    return keyedFormData.map((keyedItem) => keyedItem.item);\n  }\n  return [];\n}\n\n/** The `ArrayField` component is used to render a field in the schema that is of type `array`. It supports both normal\n * and fixed array, allowing user to add and remove elements from the array data.\n */\nclass ArrayField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T[], S, F>,\n  ArrayFieldState<T>\n> {\n  /** Constructs an `ArrayField` from the `props`, generating the initial keyed data from the `formData`\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T[], S, F>) {\n    super(props);\n    const { formData = [] } = props;\n    const keyedFormData = generateKeyedFormData<T>(formData);\n    this.state = {\n      keyedFormData,\n      updatedKeyedFormData: false,\n    };\n  }\n\n  /** React lifecycle method that is called when the props are about to change allowing the state to be updated. It\n   * regenerates the keyed form data and returns it\n   *\n   * @param nextProps - The next set of props data\n   * @param prevState - The previous set of state data\n   */\n  static getDerivedStateFromProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n    nextProps: Readonly<FieldProps<T[], S, F>>,\n    prevState: Readonly<ArrayFieldState<T>>\n  ) {\n    // Don't call getDerivedStateFromProps if keyed formdata was just updated.\n    if (prevState.updatedKeyedFormData) {\n      return {\n        updatedKeyedFormData: false,\n      };\n    }\n    const nextFormData = Array.isArray(nextProps.formData) ? nextProps.formData : [];\n    const previousKeyedFormData = prevState.keyedFormData || [];\n    const newKeyedFormData =\n      nextFormData.length === previousKeyedFormData.length\n        ? previousKeyedFormData.map((previousKeyedFormDatum, index) => {\n            return {\n              key: previousKeyedFormDatum.key,\n              item: nextFormData[index],\n            };\n          })\n        : generateKeyedFormData<T>(nextFormData);\n    return {\n      keyedFormData: newKeyedFormData,\n    };\n  }\n\n  /** Returns the appropriate title for an item by getting first the title from the schema.items, then falling back to\n   * the description from the schema.items, and finally the string \"Item\"\n   */\n  get itemTitle() {\n    const { schema, registry } = this.props;\n    const { translateString } = registry;\n    return get(\n      schema,\n      [ITEMS_KEY, 'title'],\n      get(schema, [ITEMS_KEY, 'description'], translateString(TranslatableString.ArrayItemTitle))\n    );\n  }\n\n  /** Determines whether the item described in the schema is always required, which is determined by whether any item\n   * may be null.\n   *\n   * @param itemSchema - The schema for the item\n   * @return - True if the item schema type does not contain the \"null\" type\n   */\n  isItemRequired(itemSchema: S) {\n    if (Array.isArray(itemSchema.type)) {\n      // While we don't yet support composite/nullable jsonschema types, it's\n      // future-proof to check for requirement against these.\n      return !itemSchema.type.includes('null');\n    }\n    // All non-null array item types are inherently required by design\n    return itemSchema.type !== 'null';\n  }\n\n  /** Determines whether more items can be added to the array. If the uiSchema indicates the array doesn't allow adding\n   * then false is returned. Otherwise, if the schema indicates that there are a maximum number of items and the\n   * `formData` matches that value, then false is returned, otherwise true is returned.\n   *\n   * @param formItems - The list of items in the form\n   * @returns - True if the item is addable otherwise false\n   */\n  canAddItem(formItems: any[]) {\n    const { schema, uiSchema, registry } = this.props;\n    let { addable } = getUiOptions<T[], S, F>(uiSchema, registry.globalUiOptions);\n    if (addable !== false) {\n      // if ui:options.addable was not explicitly set to false, we can add\n      // another item if we have not exceeded maxItems yet\n      if (schema.maxItems !== undefined) {\n        addable = formItems.length < schema.maxItems;\n      } else {\n        addable = true;\n      }\n    }\n    return addable;\n  }\n\n  /** Returns the default form information for an item based on the schema for that item. Deals with the possibility\n   * that the schema is fixed and allows additional items.\n   */\n  _getNewFormDataRow = (): T => {\n    const { schema, registry } = this.props;\n    const { schemaUtils } = registry;\n    let itemSchema = schema.items as S;\n    if (isFixedItems(schema) && allowAdditionalItems(schema)) {\n      itemSchema = schema.additionalItems as S;\n    }\n    // Cast this as a T to work around schema utils being for T[] caused by the FieldProps<T[], S, F> call on the class\n    return schemaUtils.getDefaultFormState(itemSchema) as unknown as T;\n  };\n\n  /** Callback handler for when the user clicks on the add or add at index buttons. Creates a new row of keyed form data\n   * either at the end of the list (when index is not specified) or inserted at the `index` when it is, adding it into\n   * the state, and then returning `onChange()` with the plain form data converted from the keyed data\n   *\n   * @param event - The event for the click\n   * @param [index] - The optional index at which to add the new data\n   */\n  _handleAddClick(event: MouseEvent, index?: number) {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const { onChange, errorSchema } = this.props;\n    const { keyedFormData } = this.state;\n    // refs #195: revalidate to ensure properly reindexing errors\n    let newErrorSchema: ErrorSchema<T>;\n    if (errorSchema) {\n      newErrorSchema = {};\n      for (const idx in errorSchema) {\n        const i = parseInt(idx);\n        if (index === undefined || i < index) {\n          set(newErrorSchema, [i], errorSchema[idx]);\n        } else if (i >= index) {\n          set(newErrorSchema, [i + 1], errorSchema[idx]);\n        }\n      }\n    }\n\n    const newKeyedFormDataRow: KeyedFormDataType<T> = {\n      key: generateRowId(),\n      item: this._getNewFormDataRow(),\n    };\n    const newKeyedFormData = [...keyedFormData];\n    if (index !== undefined) {\n      newKeyedFormData.splice(index, 0, newKeyedFormDataRow);\n    } else {\n      newKeyedFormData.push(newKeyedFormDataRow);\n    }\n    this.setState(\n      {\n        keyedFormData: newKeyedFormData,\n        updatedKeyedFormData: true,\n      },\n      () => onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema as ErrorSchema<T[]>)\n    );\n  }\n\n  /** Callback handler for when the user clicks on the add button. Creates a new row of keyed form data at the end of\n   * the list, adding it into the state, and then returning `onChange()` with the plain form data converted from the\n   * keyed data\n   *\n   * @param event - The event for the click\n   */\n  onAddClick = (event: MouseEvent) => {\n    this._handleAddClick(event);\n  };\n\n  /** Callback handler for when the user clicks on the add button on an existing array element. Creates a new row of\n   * keyed form data inserted at the `index`, adding it into the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the add button is clicked\n   */\n  onAddIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      this._handleAddClick(event, index);\n    };\n  };\n\n  /** Callback handler for when the user clicks on the copy button on an existing array element. Clones the row of\n   * keyed form data at the `index` into the next position in the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the copy button is clicked\n   */\n  onCopyIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      const { onChange, errorSchema } = this.props;\n      const { keyedFormData } = this.state;\n      // refs #195: revalidate to ensure properly reindexing errors\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i <= index) {\n            set(newErrorSchema, [i], errorSchema[idx]);\n          } else if (i > index) {\n            set(newErrorSchema, [i + 1], errorSchema[idx]);\n          }\n        }\n      }\n\n      const newKeyedFormDataRow: KeyedFormDataType<T> = {\n        key: generateRowId(),\n        item: cloneDeep(keyedFormData[index].item),\n      };\n      const newKeyedFormData = [...keyedFormData];\n      if (index !== undefined) {\n        newKeyedFormData.splice(index + 1, 0, newKeyedFormDataRow);\n      } else {\n        newKeyedFormData.push(newKeyedFormDataRow);\n      }\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema as ErrorSchema<T[]>)\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on the remove button on an existing array element. Removes the row of\n   * keyed form data at the `index` in the state, and then returning `onChange()` with the plain form data converted\n   * from the keyed data\n   *\n   * @param index - The index at which the remove button is clicked\n   */\n  onDropIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange, errorSchema } = this.props;\n      const { keyedFormData } = this.state;\n      // refs #195: revalidate to ensure properly reindexing errors\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i < index) {\n            set(newErrorSchema, [i], errorSchema[idx]);\n          } else if (i > index) {\n            set(newErrorSchema, [i - 1], errorSchema[idx]);\n          }\n        }\n      }\n      const newKeyedFormData = keyedFormData.filter((_, i) => i !== index);\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema as ErrorSchema<T[]>)\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on one of the move item buttons on an existing array element. Moves the\n   * row of keyed form data at the `index` to the `newIndex` in the state, and then returning `onChange()` with the\n   * plain form data converted from the keyed data\n   *\n   * @param index - The index of the item to move\n   * @param newIndex - The index to where the item is to be moved\n   */\n  onReorderClick = (index: number, newIndex: number) => {\n    return (event: MouseEvent<HTMLButtonElement>) => {\n      if (event) {\n        event.preventDefault();\n        event.currentTarget.blur();\n      }\n      const { onChange, errorSchema } = this.props;\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i == index) {\n            set(newErrorSchema, [newIndex], errorSchema[index]);\n          } else if (i == newIndex) {\n            set(newErrorSchema, [index], errorSchema[newIndex]);\n          } else {\n            set(newErrorSchema, [idx], errorSchema[i]);\n          }\n        }\n      }\n\n      const { keyedFormData } = this.state;\n      function reOrderArray() {\n        // Copy item\n        const _newKeyedFormData = keyedFormData.slice();\n\n        // Moves item from index to newIndex\n        _newKeyedFormData.splice(index, 1);\n        _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);\n\n        return _newKeyedFormData;\n      }\n      const newKeyedFormData = reOrderArray();\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema as ErrorSchema<T[]>)\n      );\n    };\n  };\n\n  /** Callback handler used to deal with changing the value of the data in the array at the `index`. Calls the\n   * `onChange` callback with the updated form data\n   *\n   * @param index - The index of the item being changed\n   */\n  onChangeForIndex = (index: number) => {\n    return (value: any, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      const arrayData = Array.isArray(formData) ? formData : [];\n      const newFormData = arrayData.map((item: T, i: number) => {\n        // We need to treat undefined items as nulls to have validation.\n        // See https://github.com/tdegrunt/jsonschema/issues/206\n        const jsonValue = typeof value === 'undefined' ? null : value;\n        return index === i ? jsonValue : item;\n      });\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [index]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Callback handler used to change the value for a checkbox */\n  onSelectChange = (value: any) => {\n    const { onChange, idSchema } = this.props;\n    onChange(value, undefined, idSchema && idSchema.$id);\n  };\n\n  /** Renders the `ArrayField` depending on the specific needs of the schema and uischema elements\n   */\n  render() {\n    const { schema, uiSchema, idSchema, registry } = this.props;\n    const { schemaUtils, translateString } = registry;\n    if (!(ITEMS_KEY in schema)) {\n      const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n      const UnsupportedFieldTemplate = getTemplate<'UnsupportedFieldTemplate', T[], S, F>(\n        'UnsupportedFieldTemplate',\n        registry,\n        uiOptions\n      );\n\n      return (\n        <UnsupportedFieldTemplate\n          schema={schema}\n          idSchema={idSchema}\n          reason={translateString(TranslatableString.MissingItems)}\n          registry={registry}\n        />\n      );\n    }\n    if (schemaUtils.isMultiSelect(schema)) {\n      // If array has enum or uniqueItems set to true, call renderMultiSelect() to render the default multiselect widget or a custom widget, if specified.\n      return this.renderMultiSelect();\n    }\n    if (isCustomWidget<T[], S, F>(uiSchema)) {\n      return this.renderCustomWidget();\n    }\n    if (isFixedItems(schema)) {\n      return this.renderFixedArray();\n    }\n    if (schemaUtils.isFilesArray(schema, uiSchema)) {\n      return this.renderFiles();\n    }\n    return this.renderNormalArray();\n  }\n\n  /** Renders a normal array without any limitations of length\n   */\n  renderNormalArray() {\n    const {\n      schema,\n      uiSchema = {},\n      errorSchema,\n      idSchema,\n      name,\n      title,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      idPrefix,\n      idSeparator = '_',\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    const fieldTitle = schema.title || title || name;\n    const { schemaUtils, formContext } = registry;\n    const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n    const _schemaItems: S = isObject(schema.items) ? (schema.items as S) : ({} as S);\n    const itemsSchema: S = schemaUtils.retrieveSchema(_schemaItems);\n    const formData = keyedToPlainFormData(this.state.keyedFormData);\n    const canAdd = this.canAddItem(formData);\n    const arrayProps: ArrayFieldTemplateProps<T[], S, F> = {\n      canAdd,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const itemSchema = schemaUtils.retrieveSchema(_schemaItems, itemCast);\n        const itemErrorSchema = errorSchema ? (errorSchema[index] as ErrorSchema<T[]>) : undefined;\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(itemSchema, itemIdPrefix, itemCast, idPrefix, idSeparator);\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          title: fieldTitle ? `${fieldTitle}-${index + 1}` : undefined,\n          canAdd,\n          canMoveUp: index > 0,\n          canMoveDown: index < formData.length - 1,\n          itemSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          itemData: itemCast,\n          itemUiSchema: uiSchema.items,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n          totalItems: keyedFormData.length,\n        });\n      }),\n      className: `field field-array field-array-of-${itemsSchema.type}`,\n      disabled,\n      idSchema,\n      uiSchema,\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      schema,\n      title: fieldTitle,\n      formContext,\n      formData,\n      rawErrors,\n      registry,\n    };\n\n    const Template = getTemplate<'ArrayFieldTemplate', T[], S, F>('ArrayFieldTemplate', registry, uiOptions);\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders an array using the custom widget provided by the user in the `uiSchema`\n   */\n  renderCustomWidget() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      hideError,\n      placeholder,\n      onBlur,\n      onFocus,\n      formData: items = [],\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, formContext, globalUiOptions, schemaUtils } = registry;\n    const { widget, title: uiTitle, ...options } = getUiOptions<T[], S, F>(uiSchema, globalUiOptions);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    const label = uiTitle ?? schema.title ?? name;\n    const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n    return (\n      <Widget\n        id={idSchema.$id}\n        name={name}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={options}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        hideError={hideError}\n        required={required}\n        label={label}\n        hideLabel={!displayLabel}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array as a set of checkboxes\n   */\n  renderMultiSelect() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      formData: items = [],\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      placeholder,\n      onBlur,\n      onFocus,\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, schemaUtils, formContext, globalUiOptions } = registry;\n    const itemsSchema = schemaUtils.retrieveSchema(schema.items as S, items);\n    const enumOptions = optionsList<S, T[], F>(itemsSchema, uiSchema);\n    const { widget = 'select', title: uiTitle, ...options } = getUiOptions<T[], S, F>(uiSchema, globalUiOptions);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    const label = uiTitle ?? schema.title ?? name;\n    const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n    return (\n      <Widget\n        id={idSchema.$id}\n        name={name}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={{ ...options, enumOptions }}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        label={label}\n        hideLabel={!displayLabel}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array of files using the `FileWidget`\n   */\n  renderFiles() {\n    const {\n      schema,\n      uiSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      onBlur,\n      onFocus,\n      registry,\n      formData: items = [],\n      rawErrors,\n    } = this.props;\n    const { widgets, formContext, globalUiOptions, schemaUtils } = registry;\n    const { widget = 'files', title: uiTitle, ...options } = getUiOptions<T[], S, F>(uiSchema, globalUiOptions);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    const label = uiTitle ?? schema.title ?? name;\n    const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n    return (\n      <Widget\n        options={options}\n        id={idSchema.$id}\n        name={name}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        schema={schema}\n        uiSchema={uiSchema}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        registry={registry}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n        label={label}\n        hideLabel={!displayLabel}\n      />\n    );\n  }\n\n  /** Renders an array that has a maximum limit of items\n   */\n  renderFixedArray() {\n    const {\n      schema,\n      uiSchema = {},\n      formData = [],\n      errorSchema,\n      idPrefix,\n      idSeparator = '_',\n      idSchema,\n      name,\n      title,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    let { formData: items = [] } = this.props;\n    const fieldTitle = schema.title || title || name;\n    const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n    const { schemaUtils, formContext } = registry;\n    const _schemaItems: S[] = isObject(schema.items) ? (schema.items as S[]) : ([] as S[]);\n    const itemSchemas = _schemaItems.map((item: S, index: number) =>\n      schemaUtils.retrieveSchema(item, formData[index] as unknown as T[])\n    );\n    const additionalSchema = isObject(schema.additionalItems)\n      ? schemaUtils.retrieveSchema(schema.additionalItems as S, formData)\n      : null;\n\n    if (!items || items.length < itemSchemas.length) {\n      // to make sure at least all fixed items are generated\n      items = items || [];\n      items = items.concat(new Array(itemSchemas.length - items.length));\n    }\n\n    // These are the props passed into the render function\n    const canAdd = this.canAddItem(items) && !!additionalSchema;\n    const arrayProps: ArrayFieldTemplateProps<T[], S, F> = {\n      canAdd,\n      className: 'field field-array field-array-fixed-items',\n      disabled,\n      idSchema,\n      formData,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const additional = index >= itemSchemas.length;\n        const itemSchema =\n          (additional && isObject(schema.additionalItems)\n            ? schemaUtils.retrieveSchema(schema.additionalItems as S, itemCast)\n            : itemSchemas[index]) || {};\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(itemSchema, itemIdPrefix, itemCast, idPrefix, idSeparator);\n        const itemUiSchema = additional\n          ? uiSchema.additionalItems || {}\n          : Array.isArray(uiSchema.items)\n          ? uiSchema.items[index]\n          : uiSchema.items || {};\n        const itemErrorSchema = errorSchema ? (errorSchema[index] as ErrorSchema<T[]>) : undefined;\n\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          title: fieldTitle ? `${fieldTitle}-${index + 1}` : undefined,\n          canAdd,\n          canRemove: additional,\n          canMoveUp: index >= itemSchemas.length + 1,\n          canMoveDown: additional && index < items.length - 1,\n          itemSchema,\n          itemData: itemCast,\n          itemUiSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n          totalItems: keyedFormData.length,\n        });\n      }),\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      registry,\n      schema,\n      uiSchema,\n      title: fieldTitle,\n      formContext,\n      errorSchema,\n      rawErrors,\n    };\n\n    const Template = getTemplate<'ArrayFieldTemplate', T[], S, F>('ArrayFieldTemplate', registry, uiOptions);\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders the individual array item using a `SchemaField` along with the additional properties required to be send\n   * back to the `ArrayFieldItemTemplate`.\n   *\n   * @param props - The props for the individual array item to be rendered\n   */\n  renderArrayFieldItem(props: {\n    key: string;\n    index: number;\n    name: string;\n    title: string | undefined;\n    canAdd: boolean;\n    canRemove?: boolean;\n    canMoveUp: boolean;\n    canMoveDown: boolean;\n    itemSchema: S;\n    itemData: T[];\n    itemUiSchema: UiSchema<T[], S, F>;\n    itemIdSchema: IdSchema<T[]>;\n    itemErrorSchema?: ErrorSchema<T[]>;\n    autofocus?: boolean;\n    onBlur: FieldProps<T[], S, F>['onBlur'];\n    onFocus: FieldProps<T[], S, F>['onFocus'];\n    rawErrors?: string[];\n    totalItems: number;\n  }) {\n    const {\n      key,\n      index,\n      name,\n      canAdd,\n      canRemove = true,\n      canMoveUp,\n      canMoveDown,\n      itemSchema,\n      itemData,\n      itemUiSchema,\n      itemIdSchema,\n      itemErrorSchema,\n      autofocus,\n      onBlur,\n      onFocus,\n      rawErrors,\n      totalItems,\n      title,\n    } = props;\n    const { disabled, hideError, idPrefix, idSeparator, readonly, uiSchema, registry, formContext } = this.props;\n    const {\n      fields: { ArraySchemaField, SchemaField },\n      globalUiOptions,\n    } = registry;\n    const ItemSchemaField = ArraySchemaField || SchemaField;\n    const { orderable = true, removable = true, copyable = false } = getUiOptions<T[], S, F>(uiSchema, globalUiOptions);\n    const has: { [key: string]: boolean } = {\n      moveUp: orderable && canMoveUp,\n      moveDown: orderable && canMoveDown,\n      copy: copyable && canAdd,\n      remove: removable && canRemove,\n      toolbar: false,\n    };\n    has.toolbar = Object.keys(has).some((key: keyof typeof has) => has[key]);\n\n    return {\n      children: (\n        <ItemSchemaField\n          name={name}\n          title={title}\n          index={index}\n          schema={itemSchema}\n          uiSchema={itemUiSchema}\n          formData={itemData}\n          formContext={formContext}\n          errorSchema={itemErrorSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          idSchema={itemIdSchema}\n          required={this.isItemRequired(itemSchema)}\n          onChange={this.onChangeForIndex(index)}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n          hideError={hideError}\n          autofocus={autofocus}\n          rawErrors={rawErrors}\n        />\n      ),\n      className: 'array-item',\n      disabled,\n      canAdd,\n      hasCopy: has.copy,\n      hasToolbar: has.toolbar,\n      hasMoveUp: has.moveUp,\n      hasMoveDown: has.moveDown,\n      hasRemove: has.remove,\n      index,\n      totalItems,\n      key,\n      onAddIndexClick: this.onAddIndexClick,\n      onCopyIndexClick: this.onCopyIndexClick,\n      onDropIndexClick: this.onDropIndexClick,\n      onReorderClick: this.onReorderClick,\n      readonly,\n      registry,\n      schema: itemSchema,\n      uiSchema: itemUiSchema,\n    };\n  }\n}\n\n/** `ArrayField` is `React.ComponentType<FieldProps<T[], S, F>>` (necessarily) but the `registry` requires things to be a\n * `Field` which is defined as `React.ComponentType<FieldProps<T, S, F>>`, so cast it to make `registry` happy.\n */\nexport default ArrayField;\n", "import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n", "import {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  FieldProps,\n  FormContextType,\n  EnumOptionsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n} from '@rjsf/utils';\nimport isObject from 'lodash/isObject';\n\n/** The `BooleanField` component is used to render a field in the schema is boolean. It constructs `enumOptions` for the\n * two boolean values based on the various alternatives in the schema.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction BooleanField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    registry,\n    required,\n    disabled,\n    readonly,\n    hideError,\n    autofocus,\n    title,\n    onChange,\n    onFocus,\n    onBlur,\n    rawErrors,\n  } = props;\n  const { title: schemaTitle } = schema;\n  const { widgets, formContext, translateString, globalUiOptions } = registry;\n  const {\n    widget = 'checkbox',\n    title: uiTitle,\n    // Unlike the other fields, don't use `getDisplayLabel()` since it always returns false for the boolean type\n    label: displayLabel = true,\n    ...options\n  } = getUiOptions<T, S, F>(uiSchema, globalUiOptions);\n  const Widget = getWidget(schema, widget, widgets);\n  const yes = translateString(TranslatableString.YesLabel);\n  const no = translateString(TranslatableString.NoLabel);\n  let enumOptions: EnumOptionsType<S>[] | undefined;\n  const label = uiTitle ?? schemaTitle ?? title ?? name;\n  if (Array.isArray(schema.oneOf)) {\n    enumOptions = optionsList<S, T, F>(\n      {\n        oneOf: schema.oneOf\n          .map((option) => {\n            if (isObject(option)) {\n              return {\n                ...option,\n                title: option.title || (option.const === true ? yes : no),\n              };\n            }\n            return undefined;\n          })\n          .filter((o: any) => o) as S[], // cast away the error that typescript can't grok is fixed\n      } as unknown as S,\n      uiSchema\n    );\n  } else {\n    // We deprecated enumNames in v5. It's intentionally omitted from RSJFSchema type, so we need to cast here.\n    const schemaWithEnumNames = schema as S & { enumNames?: string[] };\n    const enums = schema.enum ?? [true, false];\n    if (!schemaWithEnumNames.enumNames && enums.length === 2 && enums.every((v: any) => typeof v === 'boolean')) {\n      enumOptions = [\n        {\n          value: enums[0],\n          label: enums[0] ? yes : no,\n        },\n        {\n          value: enums[1],\n          label: enums[1] ? yes : no,\n        },\n      ];\n    } else {\n      enumOptions = optionsList<S, T, F>(\n        {\n          enum: enums,\n          // NOTE: enumNames is deprecated, but still supported for now.\n          enumNames: schemaWithEnumNames.enumNames,\n        } as unknown as S,\n        uiSchema\n      );\n    }\n  }\n\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema.$id}\n      name={name}\n      onChange={onChange}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      label={label}\n      hideLabel={!displayLabel}\n      value={formData}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      hideError={hideError}\n      registry={registry}\n      formContext={formContext}\n      autofocus={autofocus}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default BooleanField;\n", "import { Component } from 'react';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport omit from 'lodash/omit';\nimport {\n  ANY_OF_KEY,\n  deepEquals,\n  ERRORS_KEY,\n  FieldProps,\n  FormContextType,\n  getDiscriminatorFieldFromSchema,\n  getUiOptions,\n  getWidget,\n  mergeSchemas,\n  ONE_OF_KEY,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  UiSchema,\n} from '@rjsf/utils';\n\n/** Type used for the state of the `AnyOfField` component */\ntype AnyOfFieldState<S extends StrictRJSFSchema = RJSFSchema> = {\n  /** The currently selected option */\n  selectedOption: number;\n  /** The option schemas after retrieving all $refs */\n  retrievedOptions: S[];\n};\n\n/** The `AnyOfField` component is used to render a field in the schema that is an `anyOf`, `allOf` or `oneOf`. It tracks\n * the currently selected option and cleans up any irrelevant data in `formData`.\n *\n * @param props - The `FieldProps` for this template\n */\nclass AnyOfField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T, S, F>,\n  AnyOfFieldState<S>\n> {\n  /** Constructs an `AnyOfField` with the given `props` to initialize the initially selected option in state\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T, S, F>) {\n    super(props);\n\n    const {\n      formData,\n      options,\n      registry: { schemaUtils },\n    } = this.props;\n    // cache the retrieved options in state in case they have $refs to save doing it later\n    const retrievedOptions = options.map((opt: S) => schemaUtils.retrieveSchema(opt, formData));\n\n    this.state = {\n      retrievedOptions,\n      selectedOption: this.getMatchingOption(0, formData, retrievedOptions),\n    };\n  }\n\n  /** React lifecycle method that is called when the props and/or state for this component is updated. It recomputes the\n   * currently selected option based on the overall `formData`\n   *\n   * @param prevProps - The previous `FieldProps` for this template\n   * @param prevState - The previous `AnyOfFieldState` for this template\n   */\n  componentDidUpdate(prevProps: Readonly<FieldProps<T, S, F>>, prevState: Readonly<AnyOfFieldState>) {\n    const { formData, options, idSchema } = this.props;\n    const { selectedOption } = this.state;\n    let newState = this.state;\n    if (!deepEquals(prevProps.options, options)) {\n      const {\n        registry: { schemaUtils },\n      } = this.props;\n      // re-cache the retrieved options in state in case they have $refs to save doing it later\n      const retrievedOptions = options.map((opt: S) => schemaUtils.retrieveSchema(opt, formData));\n      newState = { selectedOption, retrievedOptions };\n    }\n    if (!deepEquals(formData, prevProps.formData) && idSchema.$id === prevProps.idSchema.$id) {\n      const { retrievedOptions } = newState;\n      const matchingOption = this.getMatchingOption(selectedOption, formData, retrievedOptions);\n\n      if (prevState && matchingOption !== selectedOption) {\n        newState = { selectedOption: matchingOption, retrievedOptions };\n      }\n    }\n    if (newState !== this.state) {\n      this.setState(newState);\n    }\n  }\n\n  /** Determines the best matching option for the given `formData` and `options`.\n   *\n   * @param formData - The new formData\n   * @param options - The list of options to choose from\n   * @return - The index of the `option` that best matches the `formData`\n   */\n  getMatchingOption(selectedOption: number, formData: T | undefined, options: S[]) {\n    const {\n      schema,\n      registry: { schemaUtils },\n    } = this.props;\n\n    const discriminator = getDiscriminatorFieldFromSchema<S>(schema);\n    const option = schemaUtils.getClosestMatchingOption(formData, options, selectedOption, discriminator);\n    return option;\n  }\n\n  /** Callback handler to remember what the currently selected option is. In addition to that the `formData` is updated\n   * to remove properties that are not part of the newly selected option schema, and then the updated data is passed to\n   * the `onChange` handler.\n   *\n   * @param option - The new option value being selected\n   */\n  onOptionChange = (option?: string) => {\n    const { selectedOption, retrievedOptions } = this.state;\n    const { formData, onChange, registry } = this.props;\n    const { schemaUtils } = registry;\n    const intOption = option !== undefined ? parseInt(option, 10) : -1;\n    if (intOption === selectedOption) {\n      return;\n    }\n    const newOption = intOption >= 0 ? retrievedOptions[intOption] : undefined;\n    const oldOption = selectedOption >= 0 ? retrievedOptions[selectedOption] : undefined;\n\n    let newFormData = schemaUtils.sanitizeDataForNewSchema(newOption, oldOption, formData);\n    if (newFormData && newOption) {\n      // Call getDefaultFormState to make sure defaults are populated on change. Pass \"excludeObjectChildren\"\n      // so that only the root objects themselves are created without adding undefined children properties\n      newFormData = schemaUtils.getDefaultFormState(newOption, newFormData, 'excludeObjectChildren') as T;\n    }\n\n    this.setState({ selectedOption: intOption }, () => {\n      onChange(newFormData, undefined, this.getFieldId());\n    });\n  };\n\n  getFieldId() {\n    const { idSchema, schema } = this.props;\n    return `${idSchema.$id}${schema.oneOf ? '__oneof_select' : '__anyof_select'}`;\n  }\n\n  /** Renders the `AnyOfField` selector along with a `SchemaField` for the value of the `formData`\n   */\n  render() {\n    const {\n      name,\n      disabled = false,\n      errorSchema = {},\n      formContext,\n      onBlur,\n      onFocus,\n      registry,\n      schema,\n      uiSchema,\n    } = this.props;\n\n    const { widgets, fields, translateString, globalUiOptions, schemaUtils } = registry;\n    const { SchemaField: _SchemaField } = fields;\n    const { selectedOption, retrievedOptions } = this.state;\n    const {\n      widget = 'select',\n      placeholder,\n      autofocus,\n      autocomplete,\n      title = schema.title,\n      ...uiOptions\n    } = getUiOptions<T, S, F>(uiSchema, globalUiOptions);\n    const Widget = getWidget<T, S, F>({ type: 'number' }, widget, widgets);\n    const rawErrors = get(errorSchema, ERRORS_KEY, []);\n    const fieldErrorSchema = omit(errorSchema, [ERRORS_KEY]);\n    const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n\n    const option = selectedOption >= 0 ? retrievedOptions[selectedOption] || null : null;\n    let optionSchema: S | undefined | null;\n\n    if (option) {\n      // merge top level required field\n      const { required } = schema;\n      // Merge in all the non-oneOf/anyOf properties and also skip the special ADDITIONAL_PROPERTY_FLAG property\n      optionSchema = required ? (mergeSchemas({ required }, option) as S) : option;\n    }\n\n    // First we will check to see if there is an anyOf/oneOf override for the UI schema\n    let optionsUiSchema: UiSchema<T, S, F>[] = [];\n    if (ONE_OF_KEY in schema && uiSchema && ONE_OF_KEY in uiSchema) {\n      if (Array.isArray(uiSchema[ONE_OF_KEY])) {\n        optionsUiSchema = uiSchema[ONE_OF_KEY];\n      } else {\n        console.warn(`uiSchema.oneOf is not an array for \"${title || name}\"`);\n      }\n    } else if (ANY_OF_KEY in schema && uiSchema && ANY_OF_KEY in uiSchema) {\n      if (Array.isArray(uiSchema[ANY_OF_KEY])) {\n        optionsUiSchema = uiSchema[ANY_OF_KEY];\n      } else {\n        console.warn(`uiSchema.anyOf is not an array for \"${title || name}\"`);\n      }\n    }\n    // Then we pick the one that matches the selected option index, if one exists otherwise default to the main uiSchema\n    let optionUiSchema = uiSchema;\n    if (selectedOption >= 0 && optionsUiSchema.length > selectedOption) {\n      optionUiSchema = optionsUiSchema[selectedOption];\n    }\n\n    const translateEnum: TranslatableString = title\n      ? TranslatableString.TitleOptionPrefix\n      : TranslatableString.OptionPrefix;\n    const translateParams = title ? [title] : [];\n    const enumOptions = retrievedOptions.map((opt: { title?: string }, index: number) => {\n      // Also see if there is an override title in the uiSchema for each option, otherwise use the title from the option\n      const { title: uiTitle = opt.title } = getUiOptions<T, S, F>(optionsUiSchema[index]);\n      return {\n        label: uiTitle || translateString(translateEnum, translateParams.concat(String(index + 1))),\n        value: index,\n      };\n    });\n\n    return (\n      <div className='panel panel-default panel-body'>\n        <div className='form-group'>\n          <Widget\n            id={this.getFieldId()}\n            name={`${name}${schema.oneOf ? '__oneof_select' : '__anyof_select'}`}\n            schema={{ type: 'number', default: 0 } as S}\n            onChange={this.onOptionChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            disabled={disabled || isEmpty(enumOptions)}\n            multiple={false}\n            rawErrors={rawErrors}\n            errorSchema={fieldErrorSchema}\n            value={selectedOption >= 0 ? selectedOption : undefined}\n            options={{ enumOptions, ...uiOptions }}\n            registry={registry}\n            formContext={formContext}\n            placeholder={placeholder}\n            autocomplete={autocomplete}\n            autofocus={autofocus}\n            label={title ?? name}\n            hideLabel={!displayLabel}\n          />\n        </div>\n        {optionSchema && <_SchemaField {...this.props} schema={optionSchema} uiSchema={optionUiSchema} />}\n      </div>\n    );\n  }\n}\n\nexport default AnyOfField;\n", "import { useState, useCallback } from 'react';\nimport { asNumber, FieldProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n// Matches a string that ends in a . character, optionally followed by a sequence of\n// digits followed by any number of 0 characters up until the end of the line.\n// Ensuring that there is at least one prefixed character is important so that\n// you don't incorrectly match against \"0\".\nconst trailingCharMatcherWithPrefix = /\\.([0-9]*0)*$/;\n\n// This is used for trimming the trailing 0 and . characters without affecting\n// the rest of the string. Its possible to use one RegEx with groups for this\n// functionality, but it is fairly complex compared to simply defining two\n// different matchers.\nconst trailingCharMatcher = /[0.]0*$/;\n\n/**\n * The NumberField class has some special handling for dealing with trailing\n * decimal points and/or zeroes. This logic is designed to allow trailing values\n * to be visible in the input element, but not be represented in the\n * corresponding form data.\n *\n * The algorithm is as follows:\n *\n * 1. When the input value changes the value is cached in the component state\n *\n * 2. The value is then normalized, removing trailing decimal points and zeros,\n *    then passed to the \"onChange\" callback\n *\n * 3. When the component is rendered, the formData value is checked against the\n *    value cached in the state. If it matches the cached value, the cached\n *    value is passed to the input instead of the formData value\n */\nfunction NumberField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const { registry, onChange, formData, value: initialValue } = props;\n  const [lastValue, setLastValue] = useState(initialValue);\n  const { StringField } = registry.fields;\n\n  let value = formData;\n\n  /** Handle the change from the `StringField` to properly convert to a number\n   *\n   * @param value - The current value for the change occurring\n   */\n  const handleChange = useCallback(\n    (value: FieldProps<T, S, F>['value']) => {\n      // Cache the original value in component state\n      setLastValue(value);\n\n      // Normalize decimals that don't start with a zero character in advance so\n      // that the rest of the normalization logic is simpler\n      if (`${value}`.charAt(0) === '.') {\n        value = `0${value}`;\n      }\n\n      // Check that the value is a string (this can happen if the widget used is a\n      // <select>, due to an enum declaration etc) then, if the value ends in a\n      // trailing decimal point or multiple zeroes, strip the trailing values\n      const processed =\n        typeof value === 'string' && value.match(trailingCharMatcherWithPrefix)\n          ? asNumber(value.replace(trailingCharMatcher, ''))\n          : asNumber(value);\n\n      onChange(processed as unknown as T);\n    },\n    [onChange]\n  );\n\n  if (typeof lastValue === 'string' && typeof value === 'number') {\n    // Construct a regular expression that checks for a string that consists\n    // of the formData value suffixed with zero or one '.' characters and zero\n    // or more '0' characters\n    const re = new RegExp(`^(${String(value).replace('.', '\\\\.')})?\\\\.?0*$`);\n\n    // If the cached \"lastValue\" is a match, use that instead of the formData\n    // value to prevent the input value from changing in the UI\n    if (lastValue.match(re)) {\n      value = lastValue as unknown as T;\n    }\n  }\n\n  return <StringField {...props} formData={value} onChange={handleChange} />;\n}\n\nexport default NumberField;\n", "import { Component } from 'react';\nimport {\n  getTemplate,\n  getUiOptions,\n  orderProperties,\n  ErrorSchema,\n  FieldProps,\n  FormContextType,\n  GenericObjectType,\n  IdSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  ADDITIONAL_PROPERTY_FLAG,\n  PROPERTIES_KEY,\n  REF_KEY,\n  ANY_OF_KEY,\n  ONE_OF_KEY,\n} from '@rjsf/utils';\nimport Markdown from 'markdown-to-jsx';\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nimport isObject from 'lodash/isObject';\nimport set from 'lodash/set';\nimport unset from 'lodash/unset';\n\n/** Type used for the state of the `ObjectField` component */\ntype ObjectFieldState = {\n  /** Flag indicating whether an additional property key was modified */\n  wasPropertyKeyModified: boolean;\n  /** The set of additional properties */\n  additionalProperties: object;\n};\n\n/** The `ObjectField` component is used to render a field in the schema that is of type `object`. It tracks whether an\n * additional property key was modified and what it was modified to\n *\n * @param props - The `FieldProps` for this template\n */\nclass ObjectField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T, S, F>,\n  ObjectFieldState\n> {\n  /** Set up the initial state */\n  state = {\n    wasPropertyKeyModified: false,\n    additionalProperties: {},\n  };\n\n  /** Returns a flag indicating whether the `name` field is required in the object schema\n   *\n   * @param name - The name of the field to check for required-ness\n   * @returns - True if the field `name` is required, false otherwise\n   */\n  isRequired(name: string) {\n    const { schema } = this.props;\n    return Array.isArray(schema.required) && schema.required.indexOf(name) !== -1;\n  }\n\n  /** Returns the `onPropertyChange` handler for the `name` field. Handles the special case where a user is attempting\n   * to clear the data for a field added as an additional property. Calls the `onChange()` handler with the updated\n   * formData.\n   *\n   * @param name - The name of the property\n   * @param addedByAdditionalProperties - Flag indicating whether this property is an additional property\n   * @returns - The onPropertyChange callback for the `name` property\n   */\n  onPropertyChange = (name: string, addedByAdditionalProperties = false) => {\n    return (value: T | undefined, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      if (value === undefined && addedByAdditionalProperties) {\n        // Don't set value = undefined for fields added by\n        // additionalProperties. Doing so removes them from the\n        // formData, which causes them to completely disappear\n        // (including the input field for the property name). Unlike\n        // fields which are \"mandated\" by the schema, these fields can\n        // be set to undefined by clicking a \"delete field\" button, so\n        // set empty values to the empty string.\n        value = '' as unknown as T;\n      }\n      const newFormData = { ...formData, [name]: value } as unknown as T;\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [name]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Returns a callback to handle the onDropPropertyClick event for the given `key` which removes the old `key` data\n   * and calls the `onChange` callback with it\n   *\n   * @param key - The key for which the drop callback is desired\n   * @returns - The drop property click callback\n   */\n  onDropPropertyClick = (key: string) => {\n    return (event: DragEvent) => {\n      event.preventDefault();\n      const { onChange, formData } = this.props;\n      const copiedFormData = { ...formData } as T;\n      unset(copiedFormData, key);\n      onChange(copiedFormData);\n    };\n  };\n\n  /** Computes the next available key name from the `preferredKey`, indexing through the already existing keys until one\n   * that is already not assigned is found.\n   *\n   * @param preferredKey - The preferred name of a new key\n   * @param [formData] - The form data in which to check if the desired key already exists\n   * @returns - The name of the next available key from `preferredKey`\n   */\n  getAvailableKey = (preferredKey: string, formData?: T) => {\n    const { uiSchema, registry } = this.props;\n    const { duplicateKeySuffixSeparator = '-' } = getUiOptions<T, S, F>(uiSchema, registry.globalUiOptions);\n\n    let index = 0;\n    let newKey = preferredKey;\n    while (has(formData, newKey)) {\n      newKey = `${preferredKey}${duplicateKeySuffixSeparator}${++index}`;\n    }\n    return newKey;\n  };\n\n  /** Returns a callback function that deals with the rename of a key for an additional property for a schema. That\n   * callback will attempt to rename the key and move the existing data to that key, calling `onChange` when it does.\n   *\n   * @param oldValue - The old value of a field\n   * @returns - The key change callback function\n   */\n  onKeyChange = (oldValue: any) => {\n    return (value: any, newErrorSchema: ErrorSchema<T>) => {\n      if (oldValue === value) {\n        return;\n      }\n      const { formData, onChange, errorSchema } = this.props;\n\n      value = this.getAvailableKey(value, formData);\n      const newFormData: GenericObjectType = {\n        ...(formData as GenericObjectType),\n      };\n      const newKeys: GenericObjectType = { [oldValue]: value };\n      const keyValues = Object.keys(newFormData).map((key) => {\n        const newKey = newKeys[key] || key;\n        return { [newKey]: newFormData[key] };\n      });\n      const renamedObj = Object.assign({}, ...keyValues);\n\n      this.setState({ wasPropertyKeyModified: true });\n\n      onChange(\n        renamedObj,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [value]: newErrorSchema,\n          }\n      );\n    };\n  };\n\n  /** Returns a default value to be used for a new additional schema property of the given `type`\n   *\n   * @param type - The type of the new additional schema property\n   */\n  getDefaultValue(type?: RJSFSchema['type']) {\n    const {\n      registry: { translateString },\n    } = this.props;\n    switch (type) {\n      case 'array':\n        return [];\n      case 'boolean':\n        return false;\n      case 'null':\n        return null;\n      case 'number':\n        return 0;\n      case 'object':\n        return {};\n      case 'string':\n      default:\n        // We don't have a datatype for some reason (perhaps additionalProperties was true)\n        return translateString(TranslatableString.NewStringDefault);\n    }\n  }\n\n  /** Handles the adding of a new additional property on the given `schema`. Calls the `onChange` callback once the new\n   * default data for that field has been added to the formData.\n   *\n   * @param schema - The schema element to which the new property is being added\n   */\n  handleAddClick = (schema: S) => () => {\n    if (!schema.additionalProperties) {\n      return;\n    }\n    const { formData, onChange, registry } = this.props;\n    const newFormData = { ...formData } as T;\n\n    let type: RJSFSchema['type'] = undefined;\n    let constValue: RJSFSchema['const'] = undefined;\n    let defaultValue: RJSFSchema['default'] = undefined;\n    if (isObject(schema.additionalProperties)) {\n      type = schema.additionalProperties.type;\n      constValue = schema.additionalProperties.const;\n      defaultValue = schema.additionalProperties.default;\n      let apSchema = schema.additionalProperties;\n      if (REF_KEY in apSchema) {\n        const { schemaUtils } = registry;\n        apSchema = schemaUtils.retrieveSchema({ $ref: apSchema[REF_KEY] } as S, formData);\n        type = apSchema.type;\n        constValue = apSchema.const;\n        defaultValue = apSchema.default;\n      }\n      if (!type && (ANY_OF_KEY in apSchema || ONE_OF_KEY in apSchema)) {\n        type = 'object';\n      }\n    }\n\n    const newKey = this.getAvailableKey('newKey', newFormData);\n    const newValue = constValue ?? defaultValue ?? this.getDefaultValue(type);\n    // Cast this to make the `set` work properly\n    set(newFormData as GenericObjectType, newKey, newValue);\n\n    onChange(newFormData);\n  };\n\n  /** Renders the `ObjectField` from the given props\n   */\n  render() {\n    const {\n      schema: rawSchema,\n      uiSchema = {},\n      formData,\n      errorSchema,\n      idSchema,\n      name,\n      required = false,\n      disabled,\n      readonly,\n      hideError,\n      idPrefix,\n      idSeparator,\n      onBlur,\n      onFocus,\n      registry,\n      title,\n    } = this.props;\n\n    const { fields, formContext, schemaUtils, translateString, globalUiOptions } = registry;\n    const { SchemaField } = fields;\n    const schema: S = schemaUtils.retrieveSchema(rawSchema, formData);\n    const uiOptions = getUiOptions<T, S, F>(uiSchema, globalUiOptions);\n    const { properties: schemaProperties = {} } = schema;\n\n    const templateTitle = uiOptions.title ?? schema.title ?? title ?? name;\n    const description = uiOptions.description ?? schema.description;\n    let orderedProperties: string[];\n    try {\n      const properties = Object.keys(schemaProperties);\n      orderedProperties = orderProperties(properties, uiOptions.order);\n    } catch (err) {\n      return (\n        <div>\n          <p className='config-error' style={{ color: 'red' }}>\n            <Markdown options={{ disableParsingRawHTML: true }}>\n              {translateString(TranslatableString.InvalidObjectField, [name || 'root', (err as Error).message])}\n            </Markdown>\n          </p>\n          <pre>{JSON.stringify(schema)}</pre>\n        </div>\n      );\n    }\n\n    const Template = getTemplate<'ObjectFieldTemplate', T, S, F>('ObjectFieldTemplate', registry, uiOptions);\n\n    const templateProps = {\n      // getDisplayLabel() always returns false for object types, so just check the `uiOptions.label`\n      title: uiOptions.label === false ? '' : templateTitle,\n      description: uiOptions.label === false ? undefined : description,\n      properties: orderedProperties.map((name) => {\n        const addedByAdditionalProperties = has(schema, [PROPERTIES_KEY, name, ADDITIONAL_PROPERTY_FLAG]);\n        const fieldUiSchema = addedByAdditionalProperties ? uiSchema.additionalProperties : uiSchema[name];\n        const hidden = getUiOptions<T, S, F>(fieldUiSchema).widget === 'hidden';\n        const fieldIdSchema: IdSchema<T> = get(idSchema, [name], {});\n\n        return {\n          content: (\n            <SchemaField\n              key={name}\n              name={name}\n              required={this.isRequired(name)}\n              schema={get(schema, [PROPERTIES_KEY, name], {})}\n              uiSchema={fieldUiSchema}\n              errorSchema={get(errorSchema, name)}\n              idSchema={fieldIdSchema}\n              idPrefix={idPrefix}\n              idSeparator={idSeparator}\n              formData={get(formData, name)}\n              formContext={formContext}\n              wasPropertyKeyModified={this.state.wasPropertyKeyModified}\n              onKeyChange={this.onKeyChange(name)}\n              onChange={this.onPropertyChange(name, addedByAdditionalProperties)}\n              onBlur={onBlur}\n              onFocus={onFocus}\n              registry={registry}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              onDropPropertyClick={this.onDropPropertyClick}\n            />\n          ),\n          name,\n          readonly,\n          disabled,\n          required,\n          hidden,\n        };\n      }),\n      readonly,\n      disabled,\n      required,\n      idSchema,\n      uiSchema,\n      errorSchema,\n      schema,\n      formData,\n      formContext,\n      registry,\n    };\n    return <Template {...templateProps} onAddClick={this.handleAddClick} />;\n  }\n}\n\nexport default ObjectField;\n", "/* @jsx h */\n/**\n * markdown-to-jsx is a fork of\n * [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome\n * and extensible parsing infra... without it, half of the\n * optimizations here wouldn't be feasible. 🙏🏼\n */\nimport * as React from 'react'\n\n/**\n * Analogous to `node.type`. Please note that the values here may change at any time,\n * so do not hard code against the value directly.\n */\nexport const RuleType = {\n  blockQuote: '0',\n  breakLine: '1',\n  breakThematic: '2',\n  codeBlock: '3',\n  codeFenced: '4',\n  codeInline: '5',\n  footnote: '6',\n  footnoteReference: '7',\n  gfmTask: '8',\n  heading: '9',\n  headingSetext: '10',\n  /** only available if not `disableHTMLParsing` */\n  htmlBlock: '11',\n  htmlComment: '12',\n  /** only available if not `disableHTMLParsing` */\n  htmlSelfClosing: '13',\n  image: '14',\n  link: '15',\n  /** emits a `link` 'node', does not render directly */\n  linkAngleBraceStyleDetector: '16',\n  /** emits a `link` 'node', does not render directly */\n  linkBareUrlDetector: '17',\n  /** emits a `link` 'node', does not render directly */\n  linkMailtoDetector: '18',\n  newlineCoalescer: '19',\n  orderedList: '20',\n  paragraph: '21',\n  ref: '22',\n  refImage: '23',\n  refLink: '24',\n  table: '25',\n  tableSeparator: '26',\n  text: '27',\n  textBolded: '28',\n  textEmphasized: '29',\n  textEscaped: '30',\n  textMarked: '31',\n  textStrikethroughed: '32',\n  unorderedList: '33',\n} as const\n\nexport type RuleType = (typeof RuleType)[keyof typeof RuleType]\n\nconst enum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'className',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce(\n  (obj, x) => {\n    obj[x.toLowerCase()] = x\n    return obj\n  },\n  { for: 'htmlFor' }\n)\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^(\\s*>[\\s\\S]*?)(?=\\n{2,})/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^\\s*(`{3,}|~{3,}) *(\\S+)?([^\\n]*?)?\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)*\\n?/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\n\n/**\n * Matches footnotes on the format:\n *\n * [^key]: value\n *\n * Matches multiline footnotes\n *\n * [^key]: row\n * row\n * row\n *\n * And empty lines in indented multiline footnotes\n *\n * [^key]: indented with\n *     row\n *\n *     row\n *\n * Explanation:\n *\n * 1. Look for the starting tag, eg: [^key]\n *    ^\\[\\^([^\\]]+)]\n *\n * 2. The first line starts with a colon, and continues for the rest of the line\n *   :(.*)\n *\n * 3. Parse as many additional lines as possible. Matches new non-empty lines that doesn't begin with a new footnote definition.\n *    (\\n(?!\\[\\^).+)\n *\n * 4. ...or allows for repeated newlines if the next line begins with at least four whitespaces.\n *    (\\n+ {4,}.*)\n */\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:(.*)((\\n+ {4,}.*)|(\\n(?!\\[\\^).+))*)/\n\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst FRONT_MATTER_R = /^---[ \\t]*\\n(.|\\n)*\\n---[ \\t]*\\n/\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_ATX_COMPLIANT_R =\n  /^ *(#{1,6}) +([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?((?:[^>]*[^/])?)>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1\\b)[\\s\\S])*?)<\\/\\1>(?!<\\/\\1>)\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R =\n  /^(.*\\|.*)\\n(?: *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*))?\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\n/**\n * For inline formatting, this partial attempts to ignore characters that\n * may appear in nested formatting that could prematurely trigger detection\n * and therefore miss content that should have been included.\n */\nconst INLINE_SKIP_R =\n  '((?:\\\\[.*?\\\\][([].*?[)\\\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~~.*?~~|==.*?==|.|\\\\n)*?)'\n\n/**\n * Detect a sequence like **foo** or __foo__. Note that bold has a higher priority\n * than emphasized to support nesting of both since they share a delimiter.\n */\nconst TEXT_BOLD_R = new RegExp(`^([*_])\\\\1${INLINE_SKIP_R}\\\\1\\\\1(?!\\\\1)`)\n\n/**\n * Detect a sequence like *foo* or _foo_.\n */\nconst TEXT_EMPHASIZED_R = new RegExp(`^([*_])${INLINE_SKIP_R}\\\\1(?!\\\\1|\\\\w)`)\n\n/**\n * Detect a sequence like ==foo==.\n */\nconst TEXT_MARKED_R = new RegExp(`^==${INLINE_SKIP_R}==`)\n\n/**\n * Detect a sequence like ~~foo~~.\n */\nconst TEXT_STRIKETHROUGHED_R = new RegExp(`^~~${INLINE_SKIP_R}~~`)\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\n\nconst TEXT_PLAIN_R =\n  /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&#;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\n\nconst TRIM_STARTING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^\\\\])/g\n\ntype LIST_TYPE = 1 | 2\nconst ORDERED: LIST_TYPE = 1\nconst UNORDERED: LIST_TYPE = 2\n\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst ORDERED_LIST_BULLET = '(?:\\\\d+\\\\.)'\nconst UNORDERED_LIST_BULLET = '(?:[*+-])'\n\nfunction generateListItemPrefix(type: LIST_TYPE) {\n  return (\n    '( *)(' +\n    (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n    ') +'\n  )\n}\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst ORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(UNORDERED)\n\nfunction generateListItemPrefixRegex(type: LIST_TYPE) {\n  return new RegExp(\n    '^' +\n      (type === ORDERED ? ORDERED_LIST_ITEM_PREFIX : UNORDERED_LIST_ITEM_PREFIX)\n  )\n}\n\nconst ORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(UNORDERED)\n\nfunction generateListItemRegex(type: LIST_TYPE) {\n  // recognize an individual list item:\n  //  * hi\n  //    this is part of the same item\n  //\n  //    as is this, which is a new paragraph in the same item\n  //\n  //  * but this is not part of the same item\n  return new RegExp(\n    '^' +\n      (type === ORDERED\n        ? ORDERED_LIST_ITEM_PREFIX\n        : UNORDERED_LIST_ITEM_PREFIX) +\n      '[^\\\\n]*(?:\\\\n' +\n      '(?!\\\\1' +\n      (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n      ' )[^\\\\n]*)*(\\\\n|$)',\n    'gm'\n  )\n}\n\nconst ORDERED_LIST_ITEM_R = generateListItemRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_R = generateListItemRegex(UNORDERED)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nfunction generateListRegex(type: LIST_TYPE) {\n  const bullet = type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET\n\n  return new RegExp(\n    '^( *)(' +\n      bullet +\n      ') ' +\n      '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n      '(?!\\\\1' +\n      bullet +\n      ' (?!' +\n      bullet +\n      ' ))\\\\n*' +\n      // the \\\\s*$ here is so that we can parse the inside of nested\n      // lists, where our content might end before we receive two `\\n`s\n      '|\\\\s*\\\\n*$)'\n  )\n}\n\nconst ORDERED_LIST_R = generateListRegex(ORDERED)\nconst UNORDERED_LIST_R = generateListRegex(UNORDERED)\n\nfunction generateListRule(\n  h: any,\n  type: LIST_TYPE\n): MarkdownToJSX.Rule<\n  MarkdownToJSX.OrderedListNode | MarkdownToJSX.UnorderedListNode\n> {\n  const ordered = type === ORDERED\n  const LIST_R = ordered ? ORDERED_LIST_R : UNORDERED_LIST_R\n  const LIST_ITEM_R = ordered ? ORDERED_LIST_ITEM_R : UNORDERED_LIST_ITEM_R\n  const LIST_ITEM_PREFIX_R = ordered\n    ? ORDERED_LIST_ITEM_PREFIX_R\n    : UNORDERED_LIST_ITEM_PREFIX_R\n\n  return {\n    match(source, state, prevCapture) {\n      // We only want to break into a list if we are at the start of a\n      // line. This is to avoid parsing \"hi * there\" with \"* there\"\n      // becoming a part of a list.\n      // You might wonder, \"but that's inline, so of course it wouldn't\n      // start a list?\". You would be correct! Except that some of our\n      // lists can be inline, because they might be inside another list,\n      // in which case we can parse with inline scope, but need to allow\n      // nested lists inside this inline scope.\n      const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture)\n      const isListBlock = state.list || (!state.inline && !state.simple)\n\n      if (isStartOfLine && isListBlock) {\n        source = isStartOfLine[1] + source\n\n        return LIST_R.exec(source)\n      } else {\n        return null\n      }\n    },\n    order: Priority.HIGH,\n    parse(capture, parse, state) {\n      const bullet = capture[2]\n      const start = ordered ? +bullet : undefined\n      const items = capture[0]\n        // recognize the end of a paragraph block inside a list item:\n        // two or more newlines at end end of the item\n        .replace(BLOCK_END_R, '\\n')\n        .match(LIST_ITEM_R)\n\n      let lastItemWasAParagraph = false\n      const itemContent = items.map(function (item, i) {\n        // We need to see how far indented the item is:\n        const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n        // And then we construct a regex to \"unindent\" the subsequent\n        // lines of the items by that amount:\n        const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n        // Before processing the item, we need a couple things\n        const content = item\n          // remove indents on trailing lines:\n          .replace(spaceRegex, '')\n          // remove the bullet:\n          .replace(LIST_ITEM_PREFIX_R, '')\n\n        // Handling \"loose\" lists, like:\n        //\n        //  * this is wrapped in a paragraph\n        //\n        //  * as is this\n        //\n        //  * as is this\n        const isLastItem = i === items.length - 1\n        const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n        // Any element in a list is a block if it contains multiple\n        // newlines. The last element in the list can also be a block\n        // if the previous item in the list was a block (this is\n        // because non-last items in the list can end with \\n\\n, but\n        // the last item can't, so we just \"inherit\" this property\n        // from our previous element).\n        const thisItemIsAParagraph =\n          containsBlocks || (isLastItem && lastItemWasAParagraph)\n        lastItemWasAParagraph = thisItemIsAParagraph\n\n        // backup our state for restoration afterwards. We're going to\n        // want to set state.list to true, and state.inline depending\n        // on our list's looseness.\n        const oldStateInline = state.inline\n        const oldStateList = state.list\n        state.list = true\n\n        // Parse inline if we're in a tight list, or block if we're in\n        // a loose list.\n        let adjustedContent\n        if (thisItemIsAParagraph) {\n          state.inline = false\n          adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n        } else {\n          state.inline = true\n          adjustedContent = content.replace(LIST_ITEM_END_R, '')\n        }\n\n        const result = parse(adjustedContent, state)\n\n        // Restore our state before returning\n        state.inline = oldStateInline\n        state.list = oldStateList\n\n        return result\n      })\n\n      return {\n        items: itemContent,\n        ordered: ordered,\n        start: start,\n      }\n    },\n    render(node, output, state) {\n      const Tag = node.ordered ? 'ol' : 'ul'\n\n      return (\n        <Tag\n          key={state.key}\n          start={node.type === RuleType.orderedList ? node.start : undefined}\n        >\n          {node.items.map(function generateListItem(item, i) {\n            return <li key={i}>{output(item, state)}</li>\n          })}\n        </Tag>\n      )\n    },\n  }\n}\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:\\\\([^)]*\\\\)|[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\nconst IMAGE_R = /^!\\[(.*?)\\]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/\n\nconst NON_PARAGRAPH_BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_FENCED_R,\n  CODE_BLOCK_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HEADING_ATX_COMPLIANT_R,\n  HTML_COMMENT_R,\n  NP_TABLE_R,\n  ORDERED_LIST_ITEM_R,\n  ORDERED_LIST_R,\n  UNORDERED_LIST_ITEM_R,\n  UNORDERED_LIST_R,\n]\n\nconst BLOCK_SYNTAXES = [\n  ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n  PARAGRAPH_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n/** Remove symmetrical leading and trailing quotes */\nfunction unquote(str: string) {\n  const first = str[0]\n  if (\n    (first === '\"' || first === \"'\") &&\n    str.length >= 2 &&\n    str[str.length - 1] === first\n  ) {\n    return str.slice(1, -1)\n  }\n  return str\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nexport function slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State,\n  tableOutput: boolean\n): MarkdownToJSX.ParserResult[][] {\n  const prevInTable = state.inTable\n  state.inTable = true\n  let tableRow = source\n    .trim()\n    // isolate situations where a pipe should be ignored (inline code, HTML)\n    .split(/( *(?:`[^`]*`|<.*?>.*?<\\/.*?>(?!<\\/.*?>)|\\\\\\||\\|) *)/)\n    .reduce((nodes, fragment) => {\n      if (fragment.trim() === '|')\n        nodes.push(\n          tableOutput\n            ? { type: RuleType.tableSeparator }\n            : { type: RuleType.text, text: fragment }\n        )\n      else if (fragment !== '') nodes.push.apply(nodes, parse(fragment, state))\n      return nodes\n    }, [] as MarkdownToJSX.ParserResult[])\n  state.inTable = prevInTable\n\n  let cells = [[]]\n  tableRow.forEach(function (node, i) {\n    if (node.type === RuleType.tableSeparator) {\n      // Filter out empty table separators at the start/end:\n      if (i !== 0 && i !== tableRow.length - 1) {\n        // Split the current row:\n        cells.push([])\n      }\n    } else {\n      if (\n        node.type === RuleType.text &&\n        (tableRow[i + 1] == null ||\n          tableRow[i + 1].type === RuleType.tableSeparator)\n      ) {\n        node.text = node.text.trimEnd()\n      }\n      cells[cells.length - 1].push(node)\n    }\n  })\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state, true)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  /**\n   * The table syntax makes some other parsing angry so as a bit of a hack even if alignment and/or cell rows are missing,\n   * we'll still run a detected first row through the parser and then just emit a paragraph.\n   */\n  state.inline = true\n  const align = capture[2] ? parseTableAlign(capture[2]) : []\n  const cells = capture[3] ? parseTableCells(capture[3], parse, state) : []\n  const header = parseTableRow(capture[1], parse, state, !!cells.length)\n  state.inline = false\n\n  return cells.length\n    ? {\n        align: align,\n        cells: cells,\n        header: header,\n        type: RuleType.table,\n      }\n    : {\n        children: header,\n        type: RuleType.paragraph,\n      }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  tag: MarkdownToJSX.HTMLTags,\n  key: keyof React.AllHTMLAttributes<Element>,\n  value: string,\n  sanitizeUrlFn: MarkdownToJSX.Options['sanitizer']\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key\n        .trim()\n        .replace(/(-[a-z])/g, substr => substr[1].toUpperCase())\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href' || key === 'src') {\n    return sanitizeUrlFn(value, tag, key)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type].order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA].order\n    let orderB = rules[typeB].order\n\n    // Sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = ''\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n        const capture = rule.match(source, state, prevCapture)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n          source = source.substring(currCaptureString.length)\n          const parsed = rule.parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType as unknown as RuleType\n          }\n\n          result.push(parsed)\n\n          prevCapture = currCaptureString\n          break\n        }\n\n        i++\n      }\n    }\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return function match(source, state: MarkdownToJSX.State) {\n    if (state.inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction matchParagraph(\n  source: string,\n  state: MarkdownToJSX.State,\n  prevCapturedString?: string\n) {\n  if (state.inline || state.simple) {\n    return null\n  }\n\n  if (prevCapturedString && !prevCapturedString.endsWith('\\n')) {\n    // don't match continuation of a line\n    return null\n  }\n\n  let match = ''\n\n  source.split('\\n').every(line => {\n    // bail out on first sign of non-paragraph block\n    if (NON_PARAGRAPH_BLOCK_SYNTAXES.some(regex => regex.test(line))) {\n      return false\n    }\n    match += line + '\\n'\n    return line.trim()\n  })\n\n  const captured = match.trimEnd()\n  if (captured == '') {\n    return null\n  }\n\n  return [match, captured]\n}\n\nexport function sanitizer(url: string): string {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data(?!:image)):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = true\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = false\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  children,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  state.inline = false\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  return result\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<{\n  children: MarkdownToJSX.ParserResult[]\n}> = (capture, parse, state: MarkdownToJSX.State) => {\n  return {\n    children: parseInline(parse, capture[1], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction reactFor(render) {\n  return function patchedRender(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactChild[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state.key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state.key = i\n\n        const nodeOut = patchedRender(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state.key = oldKey\n\n      return result\n    }\n\n    return render(ast, patchedRender, state)\n  }\n}\n\nfunction createRenderer(\n  rules: MarkdownToJSX.Rules,\n  userRender?: MarkdownToJSX.Options['renderRule']\n) {\n  return function renderRule(\n    ast: MarkdownToJSX.ParserResult,\n    render: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactChild {\n    const renderer = rules[ast.type].render as MarkdownToJSX.Rule['render']\n\n    return userRender\n      ? userRender(() => renderer(ast, render, state), ast, render, state)\n      : renderer(ast, render, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nexport function compiler(\n  markdown: string = '',\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.sanitizer = options.sanitizer || sanitizer\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  options.createElement = options.createElement || React.createElement\n\n  // JSX custom pragma\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n      id?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return options.createElement(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): JSX.Element {\n    input = input.replace(FRONT_MATTER_R, '')\n\n    let inline = false\n\n    if (options.forceInline) {\n      inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        inline\n          ? input\n          : `${input.trimEnd().replace(TRIM_STARTING_NEWLINES, '')}\\n\\n`,\n        {\n          inline,\n        }\n      )\n    )\n\n    while (\n      typeof arr[arr.length - 1] === 'string' &&\n      !arr[arr.length - 1].trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return React.createElement(wrapper, { key: 'outer' }, jsx)\n  }\n\n  function attrStringToMap(\n    tag: MarkdownToJSX.HTMLTags,\n    str: string\n  ): JSX.IntrinsicAttributes {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n    if (!attributes) {\n      return null\n    }\n\n    return attributes.reduce(function (map, raw, index) {\n      const delimiterIdx = raw.indexOf('=')\n\n      if (delimiterIdx !== -1) {\n        const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n        const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n        const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n        const normalizedValue = (map[mappedKey] = attributeValueToJSXPropValue(\n          tag,\n          key,\n          value,\n          options.sanitizer\n        ))\n\n        if (\n          typeof normalizedValue === 'string' &&\n          (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n            HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n        ) {\n          map[mappedKey] = React.cloneElement(compile(normalizedValue.trim()), {\n            key: index,\n          })\n        }\n      } else if (raw !== 'style') {\n        map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n      }\n\n      return map\n    }, {})\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom\n   * h() JSX pragma; this allows the override functionality to be\n   * automatically applied\n   */\n  // @ts-ignore\n  const rules: MarkdownToJSX.Rules = {\n    [RuleType.blockQuote]: {\n      match: blockRegex(BLOCKQUOTE_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          children: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        }\n      },\n      render(node, output, state) {\n        return (\n          <blockquote key={state.key}>\n            {output(node.children, state)}\n          </blockquote>\n        )\n      },\n    },\n\n    [RuleType.breakLine]: {\n      match: anyScopeRegex(BREAK_LINE_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      render(_, __, state) {\n        return <br key={state.key} />\n      },\n    },\n\n    [RuleType.breakThematic]: {\n      match: blockRegex(BREAK_THEMATIC_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      render(_, __, state) {\n        return <hr key={state.key} />\n      },\n    },\n\n    [RuleType.codeBlock]: {\n      match: blockRegex(CODE_BLOCK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          lang: undefined,\n          text: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n        }\n      },\n\n      render(node, output, state) {\n        return (\n          <pre key={state.key}>\n            <code\n              {...node.attrs}\n              className={node.lang ? `lang-${node.lang}` : ''}\n            >\n              {node.text}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs?: ReturnType<typeof attrStringToMap>\n      lang?: string\n      text: string\n    }>,\n\n    [RuleType.codeFenced]: {\n      match: blockRegex(CODE_BLOCK_FENCED_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          // if capture[3] it's additional metadata\n          attrs: attrStringToMap('code', capture[3] || ''),\n          lang: capture[2] || undefined,\n          text: capture[4],\n          type: RuleType.codeBlock,\n        }\n      },\n    },\n\n    [RuleType.codeInline]: {\n      match: simpleInlineRegex(CODE_INLINE_R),\n      order: Priority.LOW,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return <code key={state.key}>{node.text}</code>\n      },\n    },\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    [RuleType.footnote]: {\n      match: blockRegex(FOOTNOTE_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.footnoteReference]: {\n      match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse*/) {\n        return {\n          target: `#${options.slugify(capture[1], slugify)}`,\n          text: capture[1],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <a key={state.key} href={options.sanitizer(node.target, 'a', 'href')}>\n            <sup key={state.key}>{node.text}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ target: string; text: string }>,\n\n    [RuleType.gfmTask]: {\n      match: inlineRegex(GFM_TASK_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      render(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state.key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    [RuleType.heading]: {\n      match: blockRegex(\n        options.enforceAtxHeadings ? HEADING_ATX_COMPLIANT_R : HEADING_R\n      ),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2], slugify),\n          level: capture[1].length as MarkdownToJSX.HeadingNode['level'],\n        }\n      },\n      render(node, output, state) {\n        return h(\n          `h${node.level}`,\n          { id: node.id, key: state.key },\n          output(node.children, state)\n        )\n      },\n    },\n\n    [RuleType.headingSetext]: {\n      match: blockRegex(HEADING_SETEXT_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: RuleType.heading,\n        }\n      },\n    },\n\n    [RuleType.htmlBlock]: {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        const tag = (\n          noInnerParse ? tagName : capture[1]\n        ).trim() as MarkdownToJSX.HTMLTags\n\n        const ast = {\n          attrs: attrStringToMap(tag, capture[2]),\n          noInnerParse: noInnerParse,\n          tag,\n        } as {\n          attrs: ReturnType<typeof attrStringToMap>\n          children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n          noInnerParse: Boolean\n          tag: MarkdownToJSX.HTMLTags\n          text?: string | undefined\n        }\n\n        state.inAnchor = state.inAnchor || tagName === 'a'\n\n        if (noInnerParse) {\n          ast.text = capture[3]\n        } else {\n          ast.children = parseFunc(parse, trimmed, state)\n        }\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        state.inAnchor = false\n\n        return ast\n      },\n      render(node, output, state) {\n        return (\n          <node.tag key={state.key} {...node.attrs}>\n            {node.text || output(node.children, state)}\n          </node.tag>\n        )\n      },\n    },\n\n    [RuleType.htmlSelfClosing]: {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        const tag = capture[1].trim() as MarkdownToJSX.HTMLTags\n\n        return {\n          attrs: attrStringToMap(tag, capture[2] || ''),\n          tag,\n        }\n      },\n      render(node, output, state) {\n        return <node.tag {...node.attrs} key={state.key} />\n      },\n    },\n\n    [RuleType.htmlComment]: {\n      match: anyScopeRegex(HTML_COMMENT_R),\n      order: Priority.HIGH,\n      parse() {\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.image]: {\n      match: simpleInlineRegex(IMAGE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={options.sanitizer(node.target, 'img', 'src')}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      alt?: string\n      target: string\n      title?: string\n    }>,\n\n    [RuleType.link]: {\n      match: inlineRegex(LINK_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          children: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <a\n            key={state.key}\n            href={options.sanitizer(node.target, 'a', 'href')}\n            title={node.title}\n          >\n            {output(node.children, state)}\n          </a>\n        )\n      },\n    },\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    [RuleType.linkAngleBraceStyleDetector]: {\n      match: inlineRegex(LINK_AUTOLINK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkBareUrlDetector]: {\n      match: (source, state) => {\n        if (state.inAnchor) {\n          return null\n        }\n        return inlineRegex(LINK_AUTOLINK_BARE_URL_R)(source, state)\n      },\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkMailtoDetector]: {\n      match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          children: [\n            {\n              text: address.replace('mailto:', ''),\n              type: RuleType.text,\n            },\n          ],\n          target: target,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.orderedList]: generateListRule(\n      h,\n      ORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.OrderedListNode>,\n\n    [RuleType.unorderedList]: generateListRule(\n      h,\n      UNORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.UnorderedListNode>,\n\n    [RuleType.newlineCoalescer]: {\n      match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      order: Priority.LOW,\n      parse: captureNothing,\n      render(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    [RuleType.paragraph]: {\n      match: matchParagraph,\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <p key={state.key}>{output(node.children, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    [RuleType.ref]: {\n      match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      order: Priority.MAX,\n      parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.refImage]: {\n      match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      order: Priority.MAX,\n      parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return refs[node.ref] ? (\n          <img\n            key={state.key}\n            alt={node.alt}\n            src={options.sanitizer(refs[node.ref].target, 'img', 'src')}\n            title={refs[node.ref].title}\n          />\n        ) : null\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    [RuleType.refLink]: {\n      match: inlineRegex(REFERENCE_LINK_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          children: parse(capture[1], state),\n          fallbackChildren: parse(\n            capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'),\n            state\n          ),\n          ref: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state.key}\n            href={options.sanitizer(refs[node.ref].target, 'a', 'href')}\n            title={refs[node.ref].title}\n          >\n            {output(node.children, state)}\n          </a>\n        ) : (\n          <span key={state.key}>{output(node.fallbackChildren, state)}</span>\n        )\n      },\n    },\n\n    [RuleType.table]: {\n      match: blockRegex(NP_TABLE_R),\n      order: Priority.HIGH,\n      parse: parseTable,\n      render(node, output, state) {\n        const table = node as MarkdownToJSX.TableNode\n        return (\n          <table key={state.key}>\n            <thead>\n              <tr>\n                {table.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(table, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {table.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(table, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    },\n\n    [RuleType.text]: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      match: anyScopeRegex(TEXT_PLAIN_R),\n      order: Priority.MIN,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      render(node /*, output, state*/) {\n        return node.text\n      },\n    },\n\n    [RuleType.textBolded]: {\n      match: simpleInlineRegex(TEXT_BOLD_R),\n      order: Priority.MED,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      render(node, output, state) {\n        return <strong key={state.key}>{output(node.children, state)}</strong>\n      },\n    },\n\n    [RuleType.textEmphasized]: {\n      match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      render(node, output, state) {\n        return <em key={state.key}>{output(node.children, state)}</em>\n      },\n    },\n\n    [RuleType.textEscaped]: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      match: simpleInlineRegex(TEXT_ESCAPED_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[1],\n          type: RuleType.text,\n        }\n      },\n    },\n\n    [RuleType.textMarked]: {\n      match: simpleInlineRegex(TEXT_MARKED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <mark key={state.key}>{output(node.children, state)}</mark>\n      },\n    },\n\n    [RuleType.textStrikethroughed]: {\n      match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <del key={state.key}>{output(node.children, state)}</del>\n      },\n    },\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //   let { match: match, parse: parse } = rules[key]\n\n  //   rules[key].match = (...args) => {\n  //     const start = performance.now()\n  //     const result = match(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(\n  //         `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${args[0]}`\n  //       )\n\n  //     return result\n  //   }\n\n  //   rules[key].parse = (...args) => {\n  //     const start = performance.now()\n  //     const result = parse(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`)\n\n  //     console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0])\n\n  //     return result\n  //   }\n  // })\n\n  if (options.disableParsingRawHTML === true) {\n    delete rules[RuleType.htmlBlock]\n    delete rules[RuleType.htmlSelfClosing]\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(createRenderer(rules, options.renderRule))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div\n                id={options.slugify(def.identifier, slugify)}\n                key={def.identifier}\n              >\n                {def.identifier}\n                {emitter(parser(def.footnote, { inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<{\n  [key: string]: any\n  children: string\n  options?: MarkdownToJSX.Options\n}> = ({ children = '', options, ...props }) => {\n  if (process.env.NODE_ENV !== 'production' && typeof children !== 'string') {\n    console.error(\n      'markdown-to-jsx: <Markdown> component only accepts a single string as a child, received:',\n      children\n    )\n  }\n\n  return React.cloneElement(\n    compiler(children, options),\n    props as JSX.IntrinsicAttributes\n  )\n}\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof JSX.IntrinsicElements\n\n  export type State = {\n    /** true if the current content is inside anchor link grammar */\n    inAnchor?: boolean\n    /** true if parsing in an inline context (subset of rules around formatting and links) */\n    inline?: boolean\n    /** true if in a table */\n    inTable?: boolean\n    /** use this for the `key` prop */\n    key?: React.Key\n    /** true if in a list */\n    list?: boolean\n    /** true if parsing in inline context w/o links */\n    simple?: boolean\n  }\n\n  export interface BlockQuoteNode {\n    children: MarkdownToJSX.ParserResult[]\n    type: typeof RuleType.blockQuote\n  }\n\n  export interface BreakLineNode {\n    type: typeof RuleType.breakLine\n  }\n\n  export interface BreakThematicNode {\n    type: typeof RuleType.breakThematic\n  }\n\n  export interface CodeBlockNode {\n    type: typeof RuleType.codeBlock\n    attrs?: JSX.IntrinsicAttributes\n    lang?: string\n    text: string\n  }\n\n  export interface CodeFencedNode {\n    type: typeof RuleType.codeFenced\n  }\n\n  export interface CodeInlineNode {\n    type: typeof RuleType.codeInline\n    text: string\n  }\n\n  export interface FootnoteNode {\n    type: typeof RuleType.footnote\n  }\n\n  export interface FootnoteReferenceNode {\n    type: typeof RuleType.footnoteReference\n    target: string\n    text: string\n  }\n\n  export interface GFMTaskNode {\n    type: typeof RuleType.gfmTask\n    completed: boolean\n  }\n\n  export interface HeadingNode {\n    type: typeof RuleType.heading\n    children: MarkdownToJSX.ParserResult[]\n    id: string\n    level: 1 | 2 | 3 | 4 | 5 | 6\n  }\n\n  export interface HeadingSetextNode {\n    type: typeof RuleType.headingSetext\n  }\n\n  export interface HTMLCommentNode {\n    type: typeof RuleType.htmlComment\n  }\n\n  export interface ImageNode {\n    type: typeof RuleType.image\n    alt?: string\n    target: string\n    title?: string\n  }\n\n  export interface LinkNode {\n    type: typeof RuleType.link\n    children: MarkdownToJSX.ParserResult[]\n    target: string\n    title?: string\n  }\n\n  export interface LinkAngleBraceNode {\n    type: typeof RuleType.linkAngleBraceStyleDetector\n  }\n\n  export interface LinkBareURLNode {\n    type: typeof RuleType.linkBareUrlDetector\n  }\n\n  export interface LinkMailtoNode {\n    type: typeof RuleType.linkMailtoDetector\n  }\n\n  export interface OrderedListNode {\n    type: typeof RuleType.orderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: true\n    start?: number\n  }\n\n  export interface UnorderedListNode {\n    type: typeof RuleType.unorderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: false\n  }\n\n  export interface NewlineNode {\n    type: typeof RuleType.newlineCoalescer\n  }\n\n  export interface ParagraphNode {\n    type: typeof RuleType.paragraph\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ReferenceNode {\n    type: typeof RuleType.ref\n  }\n\n  export interface ReferenceImageNode {\n    type: typeof RuleType.refImage\n    alt?: string\n    ref: string\n  }\n\n  export interface ReferenceLinkNode {\n    type: typeof RuleType.refLink\n    children: MarkdownToJSX.ParserResult[]\n    fallbackChildren: MarkdownToJSX.ParserResult[]\n    ref: string\n  }\n\n  export interface TableNode {\n    type: typeof RuleType.table\n    /**\n     * alignment for each table column\n     */\n    align: ('left' | 'right' | 'center')[]\n    cells: MarkdownToJSX.ParserResult[][][]\n    header: MarkdownToJSX.ParserResult[][]\n  }\n\n  export interface TableSeparatorNode {\n    type: typeof RuleType.tableSeparator\n  }\n\n  export interface TextNode {\n    type: typeof RuleType.text\n    text: string\n  }\n\n  export interface BoldTextNode {\n    type: typeof RuleType.textBolded\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ItalicTextNode {\n    type: typeof RuleType.textEmphasized\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface EscapedTextNode {\n    type: typeof RuleType.textEscaped\n  }\n\n  export interface MarkedTextNode {\n    type: typeof RuleType.textMarked\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface StrikethroughTextNode {\n    type: typeof RuleType.textStrikethroughed\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface HTMLNode {\n    type: typeof RuleType.htmlBlock\n    attrs: JSX.IntrinsicAttributes\n    children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n    noInnerParse: Boolean\n    tag: MarkdownToJSX.HTMLTags\n    text?: string | undefined\n  }\n\n  export interface HTMLSelfClosingNode {\n    type: typeof RuleType.htmlSelfClosing\n    attrs: JSX.IntrinsicAttributes\n    tag: string\n  }\n\n  export type ParserResult =\n    | BlockQuoteNode\n    | BreakLineNode\n    | BreakThematicNode\n    | CodeBlockNode\n    | CodeFencedNode\n    | CodeInlineNode\n    | FootnoteNode\n    | FootnoteReferenceNode\n    | GFMTaskNode\n    | HeadingNode\n    | HeadingSetextNode\n    | HTMLCommentNode\n    | ImageNode\n    | LinkNode\n    | LinkAngleBraceNode\n    | LinkBareURLNode\n    | LinkMailtoNode\n    | OrderedListNode\n    | UnorderedListNode\n    | NewlineNode\n    | ParagraphNode\n    | ReferenceNode\n    | ReferenceImageNode\n    | ReferenceLinkNode\n    | TableNode\n    | TableSeparatorNode\n    | TextNode\n    | BoldTextNode\n    | ItalicTextNode\n    | EscapedTextNode\n    | MarkedTextNode\n    | StrikethroughTextNode\n    | HTMLNode\n    | HTMLSelfClosingNode\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult[]\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State\n  ) => JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    order: Priority\n    parse: MarkdownToJSX.Parser<Omit<ParserOutput, 'type'>>\n    render?: (\n      node: ParserOutput,\n      /**\n       * Continue rendering AST nodes if applicable.\n       */\n      render: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactChild\n  }\n\n  export type Rules = {\n    [K in ParserResult['type']]: K extends typeof RuleType.table\n      ? Rule<Extract<ParserResult, { type: K | typeof RuleType.paragraph }>>\n      : Rule<Extract<ParserResult, { type: K }>>\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: JSX.IntrinsicAttributes,\n      ...children: React.ReactChild[]\n    ) => React.ReactChild\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to have space between hash sign and the header text which\n     * is explicitly stated in the most of the markdown specs.\n     * https://github.github.com/gfm/#atx-heading\n     * `The opening sequence of # characters must be followed by a space or by the end of line.`\n     */\n    enforceAtxHeadings: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entities are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Allows for full control over rendering of particular rules.\n     * For example, to implement a LaTeX renderer such as `react-katex`:\n     *\n     * ```\n     * renderRule(next, node, renderChildren, state) {\n     *   if (node.type === RuleType.codeBlock && node.lang === 'latex') {\n     *     return (\n     *       <TeX as=\"div\" key={state.key}>\n     *         {String.raw`${node.text}`}\n     *       </TeX>\n     *     )\n     *   }\n     *\n     *   return next();\n     * }\n     * ```\n     *\n     * Thar be dragons obviously, but you can do a lot with this\n     * (have fun!) To see how things work internally, check the `render`\n     * method in source for a particular rule.\n     */\n    renderRule: (\n      /** Resume normal processing, call this function as a fallback if you are not returning custom JSX. */\n      next: () => React.ReactChild,\n      /** the current AST node, use `RuleType` against `node.type` for identification */\n      node: ParserResult,\n      /** use as `renderChildren(node.children)` for block nodes */\n      renderChildren: RuleOutput,\n      /** contains `key` which should be supplied to the topmost JSX element */\n      state: State\n    ) => React.ReactChild\n\n    /**\n     * Override the built-in sanitizer function for URLs, etc if desired. The built-in version is available as a library export called `sanitizer`.\n     */\n    sanitizer: (\n      value: string,\n      tag: HTMLTags,\n      attribute: string\n    ) => string | null\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (input: string, defaultFn: (input: string) => string) => string\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n  }>\n}\n\nexport default Markdown\n", "import { useCallback, Component } from 'react';\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  deepEquals,\n  descriptionId,\n  ErrorSchema,\n  FieldProps,\n  FieldTemplateProps,\n  FormContextType,\n  getSchemaType,\n  getTemplate,\n  getUiOptions,\n  ID_KEY,\n  IdSchema,\n  mergeObjects,\n  Registry,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  UI_OPTIONS_KEY,\n  UIOptionsType,\n} from '@rjsf/utils';\nimport isObject from 'lodash/isObject';\nimport omit from 'lodash/omit';\nimport Markdown from 'markdown-to-jsx';\n\n/** The map of component type to FieldName */\nconst COMPONENT_TYPES: { [key: string]: string } = {\n  array: 'ArrayField',\n  boolean: 'BooleanField',\n  integer: 'NumberField',\n  number: 'NumberField',\n  object: 'ObjectField',\n  string: 'StringField',\n  null: 'NullField',\n};\n\n/** Computes and returns which `Field` implementation to return in order to render the field represented by the\n * `schema`. The `uiOptions` are used to alter what potential `Field` implementation is actually returned. If no\n * appropriate `Field` implementation can be found then a wrapper around `UnsupportedFieldTemplate` is used.\n *\n * @param schema - The schema from which to obtain the type\n * @param uiOptions - The UI Options that may affect the component decision\n * @param idSchema - The id that is passed to the `UnsupportedFieldTemplate`\n * @param registry - The registry from which fields and templates are obtained\n * @returns - The `Field` component that is used to render the actual field data\n */\nfunction getFieldComponent<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  schema: S,\n  uiOptions: UIOptionsType<T, S, F>,\n  idSchema: IdSchema<T>,\n  registry: Registry<T, S, F>\n) {\n  const field = uiOptions.field;\n  const { fields, translateString } = registry;\n  if (typeof field === 'function') {\n    return field;\n  }\n  if (typeof field === 'string' && field in fields) {\n    return fields[field];\n  }\n\n  const schemaType = getSchemaType(schema);\n  const type: string = Array.isArray(schemaType) ? schemaType[0] : schemaType || '';\n\n  const schemaId = schema.$id;\n\n  let componentName = COMPONENT_TYPES[type];\n  if (schemaId && schemaId in fields) {\n    componentName = schemaId;\n  }\n\n  // If the type is not defined and the schema uses 'anyOf' or 'oneOf', don't\n  // render a field and let the MultiSchemaField component handle the form display\n  if (!componentName && (schema.anyOf || schema.oneOf)) {\n    return () => null;\n  }\n\n  return componentName in fields\n    ? fields[componentName]\n    : () => {\n        const UnsupportedFieldTemplate = getTemplate<'UnsupportedFieldTemplate', T, S, F>(\n          'UnsupportedFieldTemplate',\n          registry,\n          uiOptions\n        );\n\n        return (\n          <UnsupportedFieldTemplate\n            schema={schema}\n            idSchema={idSchema}\n            reason={translateString(TranslatableString.UnknownFieldType, [String(schema.type)])}\n            registry={registry}\n          />\n        );\n      };\n}\n\n/** The `SchemaFieldRender` component is the work-horse of react-jsonschema-form, determining what kind of real field to\n * render based on the `schema`, `uiSchema` and all the other props. It also deals with rendering the `anyOf` and\n * `oneOf` fields.\n *\n * @param props - The `FieldProps` for this component\n */\nfunction SchemaFieldRender<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const {\n    schema: _schema,\n    idSchema: _idSchema,\n    uiSchema,\n    formData,\n    errorSchema,\n    idPrefix,\n    idSeparator,\n    name,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    registry,\n    wasPropertyKeyModified = false,\n  } = props;\n  const { formContext, schemaUtils, globalUiOptions } = registry;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema, globalUiOptions);\n  const FieldTemplate = getTemplate<'FieldTemplate', T, S, F>('FieldTemplate', registry, uiOptions);\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    uiOptions\n  );\n  const FieldHelpTemplate = getTemplate<'FieldHelpTemplate', T, S, F>('FieldHelpTemplate', registry, uiOptions);\n  const FieldErrorTemplate = getTemplate<'FieldErrorTemplate', T, S, F>('FieldErrorTemplate', registry, uiOptions);\n  const schema = schemaUtils.retrieveSchema(_schema, formData);\n  const fieldId = _idSchema[ID_KEY];\n  const idSchema = mergeObjects(\n    schemaUtils.toIdSchema(schema, fieldId, formData, idPrefix, idSeparator),\n    _idSchema\n  ) as IdSchema<T>;\n\n  /** Intermediary `onChange` handler for field components that will inject the `id` of the current field into the\n   * `onChange` chain if it is not already being provided from a deeper level in the hierarchy\n   */\n  const handleFieldComponentChange = useCallback(\n    (formData: T | undefined, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const theId = id || fieldId;\n      return onChange(formData, newErrorSchema, theId);\n    },\n    [fieldId, onChange]\n  );\n\n  const FieldComponent = getFieldComponent<T, S, F>(schema, uiOptions, idSchema, registry);\n  const disabled = Boolean(uiOptions.disabled ?? props.disabled);\n  const readonly = Boolean(\n    uiOptions.readonly ?? (props.readonly || props.schema.const || props.schema.readOnly || schema.readOnly)\n  );\n  const uiSchemaHideError = uiOptions.hideError;\n  // Set hideError to the value provided in the uiSchema, otherwise stick with the prop to propagate to children\n  const hideError = uiSchemaHideError === undefined ? props.hideError : Boolean(uiSchemaHideError);\n  const autofocus = Boolean(uiOptions.autofocus ?? props.autofocus);\n  if (Object.keys(schema).length === 0) {\n    return null;\n  }\n\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n\n  const { __errors, ...fieldErrorSchema } = errorSchema || {};\n  // See #439: uiSchema: Don't pass consumed class names or style to child components\n  const fieldUiSchema = omit(uiSchema, ['ui:classNames', 'classNames', 'ui:style']);\n  if (UI_OPTIONS_KEY in fieldUiSchema) {\n    fieldUiSchema[UI_OPTIONS_KEY] = omit(fieldUiSchema[UI_OPTIONS_KEY], ['classNames', 'style']);\n  }\n\n  const field = (\n    <FieldComponent\n      {...props}\n      onChange={handleFieldComponentChange}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={fieldUiSchema}\n      disabled={disabled}\n      readonly={readonly}\n      hideError={hideError}\n      autofocus={autofocus}\n      errorSchema={fieldErrorSchema}\n      formContext={formContext}\n      rawErrors={__errors}\n    />\n  );\n\n  const id = idSchema[ID_KEY];\n\n  // If this schema has a title defined, but the user has set a new key/label, retain their input.\n  let label;\n  if (wasPropertyKeyModified) {\n    label = name;\n  } else {\n    label =\n      ADDITIONAL_PROPERTY_FLAG in schema\n        ? name\n        : uiOptions.title || props.schema.title || schema.title || props.title || name;\n  }\n\n  const description = uiOptions.description || props.schema.description || schema.description || '';\n\n  const richDescription = uiOptions.enableMarkdownInDescription ? (\n    <Markdown options={{ disableParsingRawHTML: true }}>{description}</Markdown>\n  ) : (\n    description\n  );\n  const help = uiOptions.help;\n  const hidden = uiOptions.widget === 'hidden';\n\n  const classNames = ['form-group', 'field', `field-${getSchemaType(schema)}`];\n  if (!hideError && __errors && __errors.length > 0) {\n    classNames.push('field-error has-error has-danger');\n  }\n  if (uiSchema?.classNames) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        \"'uiSchema.classNames' is deprecated and may be removed in a major release; Use 'ui:classNames' instead.\"\n      );\n    }\n    classNames.push(uiSchema.classNames);\n  }\n  if (uiOptions.classNames) {\n    classNames.push(uiOptions.classNames);\n  }\n\n  const helpComponent = (\n    <FieldHelpTemplate\n      help={help}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      hasErrors={!hideError && __errors && __errors.length > 0}\n      registry={registry}\n    />\n  );\n  /*\n   * AnyOf/OneOf errors handled by child schema\n   * unless it can be rendered as select control\n   */\n  const errorsComponent =\n    hideError || ((schema.anyOf || schema.oneOf) && !schemaUtils.isSelect(schema)) ? undefined : (\n      <FieldErrorTemplate\n        errors={__errors}\n        errorSchema={errorSchema}\n        idSchema={idSchema}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n    );\n  const fieldProps: Omit<FieldTemplateProps<T, S, F>, 'children'> = {\n    description: (\n      <DescriptionFieldTemplate\n        id={descriptionId<T>(id)}\n        description={richDescription}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n    ),\n    rawDescription: description,\n    help: helpComponent,\n    rawHelp: typeof help === 'string' ? help : undefined,\n    errors: errorsComponent,\n    rawErrors: hideError ? undefined : __errors,\n    id,\n    label,\n    hidden,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    disabled,\n    readonly,\n    hideError,\n    displayLabel,\n    classNames: classNames.join(' ').trim(),\n    style: uiOptions.style,\n    formContext,\n    formData,\n    schema,\n    uiSchema,\n    registry,\n  };\n\n  const _AnyOfField = registry.fields.AnyOfField;\n  const _OneOfField = registry.fields.OneOfField;\n  const isReplacingAnyOrOneOf = uiSchema?.['ui:field'] && uiSchema?.['ui:fieldReplacesAnyOrOneOf'] === true;\n\n  return (\n    <FieldTemplate {...fieldProps}>\n      <>\n        {field}\n        {/*\n        If the schema `anyOf` or 'oneOf' can be rendered as a select control, don't\n        render the selection and let `StringField` component handle\n        rendering\n      */}\n        {schema.anyOf && !isReplacingAnyOrOneOf && !schemaUtils.isSelect(schema) && (\n          <_AnyOfField\n            name={name}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n            errorSchema={errorSchema}\n            formData={formData}\n            formContext={formContext}\n            idPrefix={idPrefix}\n            idSchema={idSchema}\n            idSeparator={idSeparator}\n            onBlur={props.onBlur}\n            onChange={props.onChange}\n            onFocus={props.onFocus}\n            options={schema.anyOf.map((_schema) =>\n              schemaUtils.retrieveSchema(isObject(_schema) ? (_schema as S) : ({} as S), formData)\n            )}\n            registry={registry}\n            required={required}\n            schema={schema}\n            uiSchema={uiSchema}\n          />\n        )}\n        {schema.oneOf && !isReplacingAnyOrOneOf && !schemaUtils.isSelect(schema) && (\n          <_OneOfField\n            name={name}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n            errorSchema={errorSchema}\n            formData={formData}\n            formContext={formContext}\n            idPrefix={idPrefix}\n            idSchema={idSchema}\n            idSeparator={idSeparator}\n            onBlur={props.onBlur}\n            onChange={props.onChange}\n            onFocus={props.onFocus}\n            options={schema.oneOf.map((_schema) =>\n              schemaUtils.retrieveSchema(isObject(_schema) ? (_schema as S) : ({} as S), formData)\n            )}\n            registry={registry}\n            required={required}\n            schema={schema}\n            uiSchema={uiSchema}\n          />\n        )}\n      </>\n    </FieldTemplate>\n  );\n}\n\n/** The `SchemaField` component determines whether it is necessary to rerender the component based on any props changes\n * and if so, calls the `SchemaFieldRender` component with the props.\n */\nclass SchemaField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T, S, F>\n> {\n  shouldComponentUpdate(nextProps: Readonly<FieldProps<T, S, F>>) {\n    return !deepEquals(this.props, nextProps);\n  }\n\n  render() {\n    return <SchemaFieldRender<T, S, F> {...this.props} />;\n  }\n}\n\nexport default SchemaField;\n", "import {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  hasWidget,\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `StringField` component is used to render a schema field that represents a string type\n *\n * @param props - The `FieldProps` for this template\n */\nfunction StringField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    required,\n    disabled = false,\n    readonly = false,\n    autofocus = false,\n    onChange,\n    onBlur,\n    onFocus,\n    registry,\n    rawErrors,\n    hideError,\n  } = props;\n  const { title, format } = schema;\n  const { widgets, formContext, schemaUtils, globalUiOptions } = registry;\n  const enumOptions = schemaUtils.isSelect(schema) ? optionsList<S, T, F>(schema, uiSchema) : undefined;\n  let defaultWidget = enumOptions ? 'select' : 'text';\n  if (format && hasWidget<T, S, F>(schema, format, widgets)) {\n    defaultWidget = format;\n  }\n  const { widget = defaultWidget, placeholder = '', title: uiTitle, ...options } = getUiOptions<T, S, F>(uiSchema);\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n  const label = uiTitle ?? title ?? name;\n  const Widget = getWidget<T, S, F>(schema, widget, widgets);\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema.$id}\n      name={name}\n      label={label}\n      hideLabel={!displayLabel}\n      hideError={hideError}\n      value={formData}\n      onChange={onChange}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      formContext={formContext}\n      autofocus={autofocus}\n      registry={registry}\n      placeholder={placeholder}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default StringField;\n", "import { useEffect } from 'react';\nimport { FieldProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `NullField` component is used to render a field in the schema is null. It also ensures that the `formData` is\n * also set to null if it has no value.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction NullField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const { formData, onChange } = props;\n  useEffect(() => {\n    if (formData === undefined) {\n      onChange(null as unknown as T);\n    }\n  }, [formData, onChange]);\n\n  return null;\n}\n\nexport default NullField;\n", "import { Field, FormContextType, RegistryFieldsType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nimport ArrayField from './ArrayField';\nimport BooleanField from './BooleanField';\nimport MultiSchemaField from './MultiSchemaField';\nimport NumberField from './NumberField';\nimport ObjectField from './ObjectField';\nimport SchemaField from './SchemaField';\nimport StringField from './StringField';\nimport NullField from './NullField';\n\nfunction fields<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryFieldsType<T, S, F> {\n  return {\n    AnyOfField: MultiSchemaField,\n    ArrayField: ArrayField as unknown as Field<T, S, F>,\n    // ArrayField falls back to SchemaField if ArraySchemaField is not defined, which it isn't by default\n    BooleanField,\n    NumberField,\n    ObjectField,\n    OneOfField: MultiSchemaField,\n    SchemaField,\n    StringField,\n    NullField,\n  };\n}\n\nexport default fields;\n", "import {\n  descriptionId,\n  getTemplate,\n  getUiOptions,\n  ArrayFieldDescriptionProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `ArrayFieldDescriptionTemplate` component renders a `DescriptionFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldDescriptionProps` for the component\n */\nexport default function ArrayFieldDescriptionTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldDescriptionProps<T, S, F>) {\n  const { idSchema, description, registry, schema, uiSchema } = props;\n  const options = getUiOptions<T, S, F>(uiSchema, registry.globalUiOptions);\n  const { label: displayLabel = true } = options;\n  if (!description || !displayLabel) {\n    return null;\n  }\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    options\n  );\n  return (\n    <DescriptionFieldTemplate\n      id={descriptionId<T>(idSchema)}\n      description={description}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n", "import { CSSProperties } from 'react';\nimport { ArrayFieldTemplateItemType, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateItemType<T, S, F>) {\n  const {\n    children,\n    className,\n    disabled,\n    hasToolbar,\n    hasMoveDown,\n    hasMoveUp,\n    hasRemove,\n    hasCopy,\n    index,\n    onCopyIndexClick,\n    onDropIndexClick,\n    onReorderClick,\n    readonly,\n    registry,\n    uiSchema,\n  } = props;\n  const { CopyButton, MoveDownButton, MoveUpButton, RemoveButton } = registry.templates.ButtonTemplates;\n  const btnStyle: CSSProperties = {\n    flex: 1,\n    paddingLeft: 6,\n    paddingRight: 6,\n    fontWeight: 'bold',\n  };\n  return (\n    <div className={className}>\n      <div className={hasToolbar ? 'col-xs-9' : 'col-xs-12'}>{children}</div>\n      {hasToolbar && (\n        <div className='col-xs-3 array-item-toolbox'>\n          <div\n            className='btn-group'\n            style={{\n              display: 'flex',\n              justifyContent: 'space-around',\n            }}\n          >\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveUpButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveUp}\n                onClick={onReorderClick(index, index - 1)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveDownButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveDown}\n                onClick={onReorderClick(index, index + 1)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {hasCopy && (\n              <CopyButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onCopyIndexClick(index)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {hasRemove && (\n              <RemoveButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onDropIndexClick(index)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n", "import {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTemplateProps,\n  ArrayFieldTemplateItemType,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateProps<T, S, F>) {\n  const {\n    canAdd,\n    className,\n    disabled,\n    idSchema,\n    uiSchema,\n    items,\n    onAddClick,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n  } = props;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const ArrayFieldDescriptionTemplate = getTemplate<'ArrayFieldDescriptionTemplate', T, S, F>(\n    'ArrayFieldDescriptionTemplate',\n    registry,\n    uiOptions\n  );\n  const ArrayFieldItemTemplate = getTemplate<'ArrayFieldItemTemplate', T, S, F>(\n    'ArrayFieldItemTemplate',\n    registry,\n    uiOptions\n  );\n  const ArrayFieldTitleTemplate = getTemplate<'ArrayFieldTitleTemplate', T, S, F>(\n    'ArrayFieldTitleTemplate',\n    registry,\n    uiOptions\n  );\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset className={className} id={idSchema.$id}>\n      <ArrayFieldTitleTemplate\n        idSchema={idSchema}\n        title={uiOptions.title || title}\n        required={required}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <ArrayFieldDescriptionTemplate\n        idSchema={idSchema}\n        description={uiOptions.description || schema.description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <div className='row array-item-list'>\n        {items &&\n          items.map(({ key, ...itemProps }: ArrayFieldTemplateItemType<T, S, F>) => (\n            <ArrayFieldItemTemplate key={key} {...itemProps} />\n          ))}\n      </div>\n      {canAdd && (\n        <AddButton\n          className='array-item-add'\n          onClick={onAddClick}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n    </fieldset>\n  );\n}\n", "import {\n  getTemplate,\n  getUiOptions,\n  titleId,\n  ArrayFieldTitleProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TemplatesType,\n} from '@rjsf/utils';\n\n/** The `ArrayFieldTitleTemplate` component renders a `TitleFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldTitleProps` for the component\n */\nexport default function ArrayFieldTitleTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTitleProps<T, S, F>) {\n  const { idSchema, title, schema, uiSchema, required, registry } = props;\n  const options = getUiOptions<T, S, F>(uiSchema, registry.globalUiOptions);\n  const { label: displayLabel = true } = options;\n  if (!title || !displayLabel) {\n    return null;\n  }\n  const TitleFieldTemplate: TemplatesType<T, S, F>['TitleFieldTemplate'] = getTemplate<'TitleFieldTemplate', T, S, F>(\n    'TitleFieldTemplate',\n    registry,\n    options\n  );\n  return (\n    <TitleFieldTemplate\n      id={titleId<T>(idSchema)}\n      title={title}\n      required={required}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n", "import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  BaseInputTemplateProps,\n  examplesId,\n  getInputProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: BaseInputTemplateProps<T, S, F>) {\n  const {\n    id,\n    name, // remove this from ...rest\n    value,\n    readonly,\n    disabled,\n    autofocus,\n    onBlur,\n    onFocus,\n    onChange,\n    onChangeOverride,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    registry,\n    rawErrors,\n    type,\n    hideLabel, // remove this from ...rest\n    hideError, // remove this from ...rest\n    ...rest\n  } = props;\n\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!id) {\n    console.log('No id for', props);\n    throw new Error(`no id for props ${JSON.stringify(props)}`);\n  }\n  const inputProps = {\n    ...rest,\n    ...getInputProps<T, S, F>(schema, type, options),\n  };\n\n  let inputValue;\n  if (inputProps.type === 'number' || inputProps.type === 'integer') {\n    inputValue = value || value === 0 ? value : '';\n  } else {\n    inputValue = value == null ? '' : value;\n  }\n\n  const _onChange = useCallback(\n    ({ target: { value } }: ChangeEvent<HTMLInputElement>) => onChange(value === '' ? options.emptyValue : value),\n    [onChange, options]\n  );\n  const _onBlur = useCallback(\n    ({ target }: FocusEvent<HTMLInputElement>) => onBlur(id, target && target.value),\n    [onBlur, id]\n  );\n  const _onFocus = useCallback(\n    ({ target }: FocusEvent<HTMLInputElement>) => onFocus(id, target && target.value),\n    [onFocus, id]\n  );\n\n  return (\n    <>\n      <input\n        id={id}\n        name={id}\n        className='form-control'\n        readOnly={readonly}\n        disabled={disabled}\n        autoFocus={autofocus}\n        value={inputValue}\n        {...inputProps}\n        list={schema.examples ? examplesId<T>(id) : undefined}\n        onChange={onChangeOverride || _onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n        aria-describedby={ariaDescribedByIds<T>(id, !!schema.examples)}\n      />\n      {Array.isArray(schema.examples) && (\n        <datalist key={`datalist_${id}`} id={examplesId<T>(id)}>\n          {(schema.examples as string[])\n            .concat(schema.default && !schema.examples.includes(schema.default) ? ([schema.default] as string[]) : [])\n            .map((example: any) => {\n              return <option key={example} value={example} />;\n            })}\n        </datalist>\n      )}\n    </>\n  );\n}\n", "import { getSubmitButtonOptions, FormContextType, RJSFSchema, StrictRJSFSchema, SubmitButtonProps } from '@rjsf/utils';\n\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ uiSchema }: SubmitButtonProps<T, S, F>) {\n  const { submitText, norender, props: submitButtonProps = {} } = getSubmitButtonOptions<T, S, F>(uiSchema);\n  if (norender) {\n    return null;\n  }\n  return (\n    <div>\n      <button type='submit' {...submitButtonProps} className={`btn btn-info ${submitButtonProps.className || ''}`}>\n        {submitText}\n      </button>\n    </div>\n  );\n}\n", "import { FormContextType, IconButtonProps, RJSFSchema, StrictRJSFSchema, TranslatableString } from '@rjsf/utils';\n\nexport default function IconButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const { iconType = 'default', icon, className, uiSchema, registry, ...otherProps } = props;\n  return (\n    <button type='button' className={`btn btn-${iconType} ${className}`} {...otherProps}>\n      <i className={`glyphicon glyphicon-${icon}`} />\n    </button>\n  );\n}\n\nexport function CopyButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.CopyButton)}\n      className='array-item-copy'\n      {...props}\n      icon='copy'\n    />\n  );\n}\n\nexport function MoveDownButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.MoveDownButton)}\n      className='array-item-move-down'\n      {...props}\n      icon='arrow-down'\n    />\n  );\n}\n\nexport function MoveUpButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.MoveUpButton)}\n      className='array-item-move-up'\n      {...props}\n      icon='arrow-up'\n    />\n  );\n}\n\nexport function RemoveButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.RemoveButton)}\n      className='array-item-remove'\n      {...props}\n      iconType='danger'\n      icon='remove'\n    />\n  );\n}\n", "import { FormContextType, IconButtonProps, RJSFSchema, StrictRJSFSchema, TranslatableString } from '@rjsf/utils';\n\nimport IconButton from './IconButton';\n\n/** The `AddButton` renders a button that represent the `Add` action on a form\n */\nexport default function AddButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  className,\n  onClick,\n  disabled,\n  registry,\n}: IconButtonProps<T, S, F>) {\n  const { translateString } = registry;\n  return (\n    <div className='row'>\n      <p className={`col-xs-3 col-xs-offset-9 text-right ${className}`}>\n        <IconButton\n          iconType='info'\n          icon='plus'\n          className='btn-add col-xs-12'\n          title={translateString(TranslatableString.AddButton)}\n          onClick={onClick}\n          disabled={disabled}\n          registry={registry}\n        />\n      </p>\n    </div>\n  );\n}\n", "import { FormContextType, RJSFSchema, StrictRJSFSchema, TemplatesType } from '@rjsf/utils';\n\nimport SubmitButton from './SubmitButton';\nimport AddButton from './AddButton';\nimport { CopyButton, MoveDownButton, MoveUpButton, RemoveButton } from './IconButton';\n\nfunction buttonTemplates<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): TemplatesType<T, S, F>['ButtonTemplates'] {\n  return {\n    SubmitButton,\n    AddButton,\n    CopyButton,\n    MoveDownButton,\n    MoveUpButton,\n    RemoveButton,\n  };\n}\n\nexport default buttonTemplates;\n", "import { DescriptionFieldProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: DescriptionFieldProps<T, S, F>) {\n  const { id, description } = props;\n  if (!description) {\n    return null;\n  }\n  if (typeof description === 'string') {\n    return (\n      <p id={id} className='field-description'>\n        {description}\n      </p>\n    );\n  } else {\n    return (\n      <div id={id} className='field-description'>\n        {description}\n      </div>\n    );\n  }\n}\n", "import {\n  ErrorListProps,\n  FormContextType,\n  RJSFValidationError,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n} from '@rjsf/utils';\n\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  errors,\n  registry,\n}: ErrorListProps<T, S, F>) {\n  const { translateString } = registry;\n  return (\n    <div className='panel panel-danger errors'>\n      <div className='panel-heading'>\n        <h3 className='panel-title'>{translateString(TranslatableString.ErrorsLabel)}</h3>\n      </div>\n      <ul className='list-group'>\n        {errors.map((error: RJSFValidationError, i: number) => {\n          return (\n            <li key={i} className='list-group-item text-danger'>\n              {error.stack}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n", "const REQUIRED_FIELD_SYMBOL = '*';\n\nexport type LabelProps = {\n  /** The label for the field */\n  label?: string;\n  /** A boolean value stating if the field is required */\n  required?: boolean;\n  /** The id of the input field being labeled */\n  id?: string;\n};\n\n/** Renders a label for a field\n *\n * @param props - The `LabelProps` for this component\n */\nexport default function Label(props: LabelProps) {\n  const { label, required, id } = props;\n  if (!label) {\n    return null;\n  }\n  return (\n    <label className='control-label' htmlFor={id}>\n      {label}\n      {required && <span className='required'>{REQUIRED_FIELD_SYMBOL}</span>}\n    </label>\n  );\n}\n", "import {\n  FieldTemplateProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  getTemplate,\n  getUiOptions,\n} from '@rjsf/utils';\n\nimport Label from './Label';\n\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldTemplateProps<T, S, F>) {\n  const { id, label, children, errors, help, description, hidden, required, displayLabel, registry, uiSchema } = props;\n  const uiOptions = getUiOptions(uiSchema);\n  const WrapIfAdditionalTemplate = getTemplate<'WrapIfAdditionalTemplate', T, S, F>(\n    'WrapIfAdditionalTemplate',\n    registry,\n    uiOptions\n  );\n  if (hidden) {\n    return <div className='hidden'>{children}</div>;\n  }\n  return (\n    <WrapIfAdditionalTemplate {...props}>\n      {displayLabel && <Label label={label} required={required} id={id} />}\n      {displayLabel && description ? description : null}\n      {children}\n      {errors}\n      {help}\n    </WrapIfAdditionalTemplate>\n  );\n}\n", "import FieldTemplate from './FieldTemplate';\n\nexport default FieldTemplate;\n", "import { errorId, FieldErrorProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldErrorProps<T, S, F>) {\n  const { errors = [], idSchema } = props;\n  if (errors.length === 0) {\n    return null;\n  }\n  const id = errorId<T>(idSchema);\n\n  return (\n    <div>\n      <ul id={id} className='error-detail bs-callout bs-callout-info'>\n        {errors\n          .filter((elem) => !!elem)\n          .map((error, index: number) => {\n            return (\n              <li className='text-danger' key={index}>\n                {error}\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n}\n", "import { helpId, FieldHelpProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldHelpProps<T, S, F>) {\n  const { idSchema, help } = props;\n  if (!help) {\n    return null;\n  }\n  const id = helpId<T>(idSchema);\n  if (typeof help === 'string') {\n    return (\n      <p id={id} className='help-block'>\n        {help}\n      </p>\n    );\n  }\n  return (\n    <div id={id} className='help-block'>\n      {help}\n    </div>\n  );\n}\n", "import {\n  FormContextType,\n  ObjectFieldTemplatePropertyType,\n  ObjectFieldTemplateProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n  canExpand,\n  descriptionId,\n  getTemplate,\n  getUiOptions,\n  titleId,\n} from '@rjsf/utils';\n\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ObjectFieldTemplateProps<T, S, F>) {\n  const {\n    description,\n    disabled,\n    formData,\n    idSchema,\n    onAddClick,\n    properties,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n    uiSchema,\n  } = props;\n  const options = getUiOptions<T, S, F>(uiSchema);\n  const TitleFieldTemplate = getTemplate<'TitleFieldTemplate', T, S, F>('TitleFieldTemplate', registry, options);\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    options\n  );\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset id={idSchema.$id}>\n      {title && (\n        <TitleFieldTemplate\n          id={titleId<T>(idSchema)}\n          title={title}\n          required={required}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {description && (\n        <DescriptionFieldTemplate\n          id={descriptionId<T>(idSchema)}\n          description={description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {properties.map((prop: ObjectFieldTemplatePropertyType) => prop.content)}\n      {canExpand<T, S, F>(schema, uiSchema, formData) && (\n        <AddButton\n          className='object-property-expand'\n          onClick={onAddClick(schema)}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n    </fieldset>\n  );\n}\n", "import { FormContextType, TitleFieldProps, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nconst REQUIRED_FIELD_SYMBOL = '*';\n\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: TitleFieldProps<T, S, F>\n) {\n  const { id, title, required } = props;\n  return (\n    <legend id={id}>\n      {title}\n      {required && <span className='required'>{REQUIRED_FIELD_SYMBOL}</span>}\n    </legend>\n  );\n}\n", "import { FormContextType, RJSFSchema, StrictRJSFSchema, TranslatableString, UnsupportedFieldProps } from '@rjsf/utils';\nimport Markdown from 'markdown-to-jsx';\n\n/** The `UnsupportedField` component is used to render a field in the schema is one that is not supported by\n * react-jsonschema-form.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction UnsupportedField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: UnsupportedFieldProps<T, S, F>\n) {\n  const { schema, idSchema, reason, registry } = props;\n  const { translateString } = registry;\n  let translateEnum: TranslatableString = TranslatableString.UnsupportedField;\n  const translateParams: string[] = [];\n  if (idSchema && idSchema.$id) {\n    translateEnum = TranslatableString.UnsupportedFieldWithId;\n    translateParams.push(idSchema.$id);\n  }\n  if (reason) {\n    translateEnum =\n      translateEnum === TranslatableString.UnsupportedField\n        ? TranslatableString.UnsupportedFieldWithReason\n        : TranslatableString.UnsupportedFieldWithIdAndReason;\n    translateParams.push(reason);\n  }\n  return (\n    <div className='unsupported-field'>\n      <p>\n        <Markdown options={{ disableParsingRawHTML: true }}>{translateString(translateEnum, translateParams)}</Markdown>\n      </p>\n      {schema && <pre>{JSON.stringify(schema, null, 2)}</pre>}\n    </div>\n  );\n}\n\nexport default UnsupportedField;\n", "import {\n  ADDITIONAL_PROPERTY_FLAG,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  WrapIfAdditionalTemplateProps,\n} from '@rjsf/utils';\n\nimport Label from './FieldTemplate/Label';\n\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WrapIfAdditionalTemplateProps<T, S, F>) {\n  const {\n    id,\n    classNames,\n    style,\n    disabled,\n    label,\n    onKeyChange,\n    onDropPropertyClick,\n    readonly,\n    required,\n    schema,\n    children,\n    uiSchema,\n    registry,\n  } = props;\n  const { templates, translateString } = registry;\n  // Button templates are not overridden in the uiSchema\n  const { RemoveButton } = templates.ButtonTemplates;\n  const keyLabel = translateString(TranslatableString.KeyLabel, [label]);\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n\n  if (!additional) {\n    return (\n      <div className={classNames} style={style}>\n        {children}\n      </div>\n    );\n  }\n\n  return (\n    <div className={classNames} style={style}>\n      <div className='row'>\n        <div className='col-xs-5 form-additional'>\n          <div className='form-group'>\n            <Label label={keyLabel} required={required} id={`${id}-key`} />\n            <input\n              className='form-control'\n              type='text'\n              id={`${id}-key`}\n              onBlur={({ target }) => onKeyChange(target && target.value)}\n              defaultValue={label}\n            />\n          </div>\n        </div>\n        <div className='form-additional form-group col-xs-5'>{children}</div>\n        <div className='col-xs-2'>\n          <RemoveButton\n            className='array-item-remove btn-block'\n            style={{ border: '0' }}\n            disabled={disabled || readonly}\n            onClick={onDropPropertyClick(label)}\n            uiSchema={uiSchema}\n            registry={registry}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n", "import { FormContextType, RJSFSchema, StrictRJSFSchema, TemplatesType } from '@rjsf/utils';\n\nimport ArrayFieldDescriptionTemplate from './ArrayFieldDescriptionTemplate';\nimport ArrayFieldItemTemplate from './ArrayFieldItemTemplate';\nimport ArrayFieldTemplate from './ArrayFieldTemplate';\nimport ArrayFieldTitleTemplate from './ArrayFieldTitleTemplate';\nimport BaseInputTemplate from './BaseInputTemplate';\nimport ButtonTemplates from './ButtonTemplates';\nimport DescriptionField from './DescriptionField';\nimport ErrorList from './ErrorList';\nimport FieldTemplate from './FieldTemplate';\nimport FieldErrorTemplate from './FieldErrorTemplate';\nimport FieldHelpTemplate from './FieldHelpTemplate';\nimport ObjectFieldTemplate from './ObjectFieldTemplate';\nimport TitleField from './TitleField';\nimport UnsupportedField from './UnsupportedField';\nimport WrapIfAdditionalTemplate from './WrapIfAdditionalTemplate';\n\nfunction templates<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(): TemplatesType<\n  T,\n  S,\n  F\n> {\n  return {\n    ArrayFieldDescriptionTemplate,\n    ArrayFieldItemTemplate,\n    ArrayFieldTemplate,\n    ArrayFieldTitleTemplate,\n    ButtonTemplates: ButtonTemplates<T, S, F>(),\n    BaseInputTemplate,\n    DescriptionFieldTemplate: DescriptionField,\n    ErrorListTemplate: ErrorList,\n    FieldTemplate,\n    FieldErrorTemplate,\n    FieldHelpTemplate,\n    ObjectFieldTemplate,\n    TitleFieldTemplate: TitleField,\n    UnsupportedFieldTemplate: UnsupportedField,\n    WrapIfAdditionalTemplate,\n  };\n}\n\nexport default templates;\n", "import { MouseEvent, useCallback, useEffect, useReducer, useState } from 'react';\nimport {\n  ariaDescribedByIds,\n  dateRangeOptions,\n  parseDateString,\n  toDateString,\n  DateObject,\n  type DateElementFormat,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  WidgetProps,\n  getDateElementProps,\n} from '@rjsf/utils';\n\nfunction readyForChange(state: DateObject) {\n  return Object.values(state).every((value) => value !== -1);\n}\n\ntype DateElementProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> = Pick<\n  WidgetProps<T, S, F>,\n  'value' | 'name' | 'disabled' | 'readonly' | 'autofocus' | 'registry' | 'onBlur' | 'onFocus'\n> & {\n  rootId: string;\n  select: (property: keyof DateObject, value: any) => void;\n  type: string;\n  range: [number, number];\n};\n\nfunction DateElement<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  type,\n  range,\n  value,\n  select,\n  rootId,\n  name,\n  disabled,\n  readonly,\n  autofocus,\n  registry,\n  onBlur,\n  onFocus,\n}: DateElementProps<T, S, F>) {\n  const id = rootId + '_' + type;\n  const { SelectWidget } = registry.widgets;\n  return (\n    <SelectWidget\n      schema={{ type: 'integer' } as S}\n      id={id}\n      name={name}\n      className='form-control'\n      options={{ enumOptions: dateRangeOptions<S>(range[0], range[1]) }}\n      placeholder={type}\n      value={value}\n      disabled={disabled}\n      readonly={readonly}\n      autofocus={autofocus}\n      onChange={(value: any) => select(type as keyof DateObject, value)}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      registry={registry}\n      label=''\n      aria-describedby={ariaDescribedByIds<T>(rootId)}\n    />\n  );\n}\n\n/** The `AltDateWidget` is an alternative widget for rendering date properties.\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  time = false,\n  disabled = false,\n  readonly = false,\n  autofocus = false,\n  options,\n  id,\n  name,\n  registry,\n  onBlur,\n  onFocus,\n  onChange,\n  value,\n}: WidgetProps<T, S, F>) {\n  const { translateString } = registry;\n  const [lastValue, setLastValue] = useState(value);\n  const [state, setState] = useReducer((state: DateObject, action: Partial<DateObject>) => {\n    return { ...state, ...action };\n  }, parseDateString(value, time));\n\n  useEffect(() => {\n    const stateValue = toDateString(state, time);\n    if (readyForChange(state) && stateValue !== value) {\n      // The user changed the date to a new valid data via the comboboxes, so call onChange\n      onChange(stateValue);\n    } else if (lastValue !== value) {\n      // We got a new value in the props\n      setLastValue(value);\n      setState(parseDateString(value, time));\n    }\n  }, [time, value, onChange, state, lastValue]);\n\n  const handleChange = useCallback((property: keyof DateObject, value: string) => {\n    setState({ [property]: value });\n  }, []);\n\n  const handleSetNow = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      const nextState = parseDateString(new Date().toJSON(), time);\n      onChange(toDateString(nextState, time));\n    },\n    [disabled, readonly, time]\n  );\n\n  const handleClear = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      onChange(undefined);\n    },\n    [disabled, readonly, onChange]\n  );\n\n  return (\n    <ul className='list-inline'>\n      {getDateElementProps(\n        state,\n        time,\n        options.yearsRange as [number, number] | undefined,\n        options.format as DateElementFormat | undefined\n      ).map((elemProps, i) => (\n        <li className='list-inline-item' key={i}>\n          <DateElement\n            rootId={id}\n            name={name}\n            select={handleChange}\n            {...elemProps}\n            disabled={disabled}\n            readonly={readonly}\n            registry={registry}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            autofocus={autofocus && i === 0}\n          />\n        </li>\n      ))}\n      {(options.hideNowButton !== 'undefined' ? !options.hideNowButton : true) && (\n        <li className='list-inline-item'>\n          <a href='#' className='btn btn-info btn-now' onClick={handleSetNow}>\n            {translateString(TranslatableString.NowLabel)}\n          </a>\n        </li>\n      )}\n      {(options.hideClearButton !== 'undefined' ? !options.hideClearButton : true) && (\n        <li className='list-inline-item'>\n          <a href='#' className='btn btn-warning btn-clear' onClick={handleClear}>\n            {translateString(TranslatableString.ClearLabel)}\n          </a>\n        </li>\n      )}\n    </ul>\n  );\n}\n\nexport default AltDateWidget;\n", "import { FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `AltDateTimeWidget` is an alternative widget for rendering datetime properties.\n *  It uses the AltDateWidget for rendering, with the `time` prop set to true by default.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateTimeWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  time = true,\n  ...props\n}: WidgetProps<T, S, F>) {\n  const { AltDateWidget } = props.registry.widgets;\n  return <AltDateWidget time={time} {...props} />;\n}\n\nexport default AltDateTimeWidget;\n", "import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  descriptionId,\n  getTemplate,\n  labelValue,\n  schemaRequiresTrueValue,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  schema,\n  uiSchema,\n  options,\n  id,\n  value,\n  disabled,\n  readonly,\n  label,\n  hideLabel,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  registry,\n}: WidgetProps<T, S, F>) {\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    options\n  );\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue<S>(schema);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => onChange(event.target.checked),\n    [onChange]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onBlur(id, event.target.checked),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onFocus(id, event.target.checked),\n    [onFocus, id]\n  );\n  const description = options.description ?? schema.description;\n\n  return (\n    <div className={`checkbox ${disabled || readonly ? 'disabled' : ''}`}>\n      {!hideLabel && !!description && (\n        <DescriptionFieldTemplate\n          id={descriptionId<T>(id)}\n          description={description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      <label>\n        <input\n          type='checkbox'\n          id={id}\n          name={id}\n          checked={typeof value === 'undefined' ? false : value}\n          required={required}\n          disabled={disabled || readonly}\n          autoFocus={autofocus}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n          aria-describedby={ariaDescribedByIds<T>(id)}\n        />\n        {labelValue(<span>{label}</span>, hideLabel)}\n      </label>\n    </div>\n  );\n}\n\nexport default CheckboxWidget;\n", "import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  enumOptionsDeselectValue,\n  enumOptionsIsSelected,\n  enumOptionsSelectValue,\n  enumOptionsValueForIndex,\n  optionId,\n  FormContextType,\n  WidgetProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxesWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  id,\n  disabled,\n  options: { inline = false, enumOptions, enumDisabled, emptyValue },\n  value,\n  autofocus = false,\n  readonly,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, S, F>) {\n  const checkboxesValues = Array.isArray(value) ? value : [value];\n\n  const handleBlur = useCallback(\n    ({ target }: FocusEvent<HTMLInputElement>) =>\n      onBlur(id, enumOptionsValueForIndex<S>(target && target.value, enumOptions, emptyValue)),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target }: FocusEvent<HTMLInputElement>) =>\n      onFocus(id, enumOptionsValueForIndex<S>(target && target.value, enumOptions, emptyValue)),\n    [onFocus, id]\n  );\n  return (\n    <div className='checkboxes' id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, index) => {\n          const checked = enumOptionsIsSelected<S>(option.value, checkboxesValues);\n          const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;\n          const disabledCls = disabled || itemDisabled || readonly ? 'disabled' : '';\n\n          const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            if (event.target.checked) {\n              onChange(enumOptionsSelectValue<S>(index, checkboxesValues, enumOptions));\n            } else {\n              onChange(enumOptionsDeselectValue<S>(index, checkboxesValues, enumOptions));\n            }\n          };\n\n          const checkbox = (\n            <span>\n              <input\n                type='checkbox'\n                id={optionId(id, index)}\n                name={id}\n                checked={checked}\n                value={String(index)}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && index === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n                aria-describedby={ariaDescribedByIds<T>(id)}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n          return inline ? (\n            <label key={index} className={`checkbox-inline ${disabledCls}`}>\n              {checkbox}\n            </label>\n          ) : (\n            <div key={index} className={`checkbox ${disabledCls}`}>\n              <label>{checkbox}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default CheckboxesWidget;\n", "import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `ColorWidget` component uses the `BaseInputTemplate` changing the type to `color` and disables it when it is\n * either disabled or readonly.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function ColorWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { disabled, readonly, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='color' {...props} disabled={disabled || readonly} />;\n}\n", "import { useCallback } from 'react';\nimport { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `DateWidget` component uses the `BaseInputTemplate` changing the type to `date` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  const handleChange = useCallback((value: any) => onChange(value || undefined), [onChange]);\n\n  return <BaseInputTemplate type='date' {...props} onChange={handleChange} />;\n}\n", "import {\n  getTemplate,\n  localToUTC,\n  utcToLocal,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\n/** The `DateTimeWidget` component uses the `BaseInputTemplate` changing the type to `datetime-local` and transforms\n * the value to/from utc using the appropriate utility functions.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateTimeWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return (\n    <BaseInputTemplate\n      type='datetime-local'\n      {...props}\n      value={utcToLocal(value)}\n      onChange={(value) => onChange(localToUTC(value))}\n    />\n  );\n}\n", "import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `EmailWidget` component uses the `BaseInputTemplate` changing the type to `email`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function EmailWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='email' {...props} />;\n}\n", "import { ChangeEvent, useCallback, useMemo } from 'react';\nimport {\n  dataURItoBlob,\n  FormContextType,\n  getTemplate,\n  Registry,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  UIOptionsType,\n  WidgetProps,\n} from '@rjsf/utils';\nimport Markdown from 'markdown-to-jsx';\n\nfunction addNameToDataURL(dataURL: string, name: string) {\n  if (dataURL === null) {\n    return null;\n  }\n  return dataURL.replace(';base64', `;name=${encodeURIComponent(name)};base64`);\n}\n\ntype FileInfoType = {\n  dataURL?: string | null;\n  name: string;\n  size: number;\n  type: string;\n};\n\nfunction processFile(file: File): Promise<FileInfoType> {\n  const { name, size, type } = file;\n  return new Promise((resolve, reject) => {\n    const reader = new window.FileReader();\n    reader.onerror = reject;\n    reader.onload = (event) => {\n      if (typeof event.target?.result === 'string') {\n        resolve({\n          dataURL: addNameToDataURL(event.target.result, name),\n          name,\n          size,\n          type,\n        });\n      } else {\n        resolve({\n          dataURL: null,\n          name,\n          size,\n          type,\n        });\n      }\n    };\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction processFiles(files: FileList) {\n  return Promise.all(Array.from(files).map(processFile));\n}\n\nfunction FileInfoPreview<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  fileInfo,\n  registry,\n}: {\n  fileInfo: FileInfoType;\n  registry: Registry<T, S, F>;\n}) {\n  const { translateString } = registry;\n  const { dataURL, type, name } = fileInfo;\n  if (!dataURL) {\n    return null;\n  }\n\n  // If type is JPEG or PNG then show image preview.\n  // Originally, any type of image was supported, but this was changed into a whitelist\n  // since SVGs and animated GIFs are also images, which are generally considered a security risk.\n  if (['image/jpeg', 'image/png'].includes(type)) {\n    return <img src={dataURL} style={{ maxWidth: '100%' }} className='file-preview' />;\n  }\n\n  // otherwise, let users download file\n\n  return (\n    <>\n      {' '}\n      <a download={`preview-${name}`} href={dataURL} className='file-download'>\n        {translateString(TranslatableString.PreviewLabel)}\n      </a>\n    </>\n  );\n}\n\nfunction FilesInfo<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  filesInfo,\n  registry,\n  preview,\n  onRemove,\n  options,\n}: {\n  filesInfo: FileInfoType[];\n  registry: Registry<T, S, F>;\n  preview?: boolean;\n  onRemove: (index: number) => void;\n  options: UIOptionsType<T, S, F>;\n}) {\n  if (filesInfo.length === 0) {\n    return null;\n  }\n  const { translateString } = registry;\n\n  const { RemoveButton } = getTemplate<'ButtonTemplates', T, S, F>('ButtonTemplates', registry, options);\n\n  return (\n    <ul className='file-info'>\n      {filesInfo.map((fileInfo, key) => {\n        const { name, size, type } = fileInfo;\n        const handleRemove = () => onRemove(key);\n        return (\n          <li key={key}>\n            <Markdown>{translateString(TranslatableString.FilesInfo, [name, type, String(size)])}</Markdown>\n            {preview && <FileInfoPreview<T, S, F> fileInfo={fileInfo} registry={registry} />}\n            <RemoveButton onClick={handleRemove} registry={registry} />\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction extractFileInfo(dataURLs: string[]): FileInfoType[] {\n  return dataURLs.reduce((acc, dataURL) => {\n    if (!dataURL) {\n      return acc;\n    }\n    try {\n      const { blob, name } = dataURItoBlob(dataURL);\n      return [\n        ...acc,\n        {\n          dataURL,\n          name: name,\n          size: blob.size,\n          type: blob.type,\n        },\n      ];\n    } catch (e) {\n      // Invalid dataURI, so just ignore it.\n      return acc;\n    }\n  }, [] as FileInfoType[]);\n}\n\n/**\n *  The `FileWidget` is a widget for rendering file upload fields.\n *  It is typically used with a string property with data-url format.\n */\nfunction FileWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { disabled, readonly, required, multiple, onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (!event.target.files) {\n        return;\n      }\n      // Due to variances in themes, dealing with multiple files for the array case now happens one file at a time.\n      // This is because we don't pass `multiple` into the `BaseInputTemplate` anymore. Instead, we deal with the single\n      // file in each event and concatenate them together ourselves\n      processFiles(event.target.files).then((filesInfoEvent) => {\n        const newValue = filesInfoEvent.map((fileInfo) => fileInfo.dataURL);\n        if (multiple) {\n          onChange(value.concat(newValue));\n        } else {\n          onChange(newValue[0]);\n        }\n      });\n    },\n    [multiple, value, onChange]\n  );\n\n  const filesInfo = useMemo(() => extractFileInfo(Array.isArray(value) ? value : [value]), [value]);\n  const rmFile = useCallback(\n    (index: number) => {\n      if (multiple) {\n        const newValue = value.filter((_: any, i: number) => i !== index);\n        onChange(newValue);\n      } else {\n        onChange(undefined);\n      }\n    },\n    [multiple, value, onChange]\n  );\n  return (\n    <div>\n      <BaseInputTemplate\n        {...props}\n        disabled={disabled || readonly}\n        type='file'\n        required={value ? false : required} // this turns off HTML required validation when a value exists\n        onChangeOverride={handleChange}\n        value=''\n        accept={options.accept ? String(options.accept) : undefined}\n      />\n      <FilesInfo<T, S, F>\n        filesInfo={filesInfo}\n        onRemove={rmFile}\n        registry={registry}\n        preview={options.filePreview}\n        options={options}\n      />\n    </div>\n  );\n}\n\nexport default FileWidget;\n", "import { FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `HiddenWidget` is a widget for rendering a hidden input field.\n *  It is typically used by setting type to \"hidden\".\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction HiddenWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  id,\n  value,\n}: WidgetProps<T, S, F>) {\n  return <input type='hidden' id={id} name={id} value={typeof value === 'undefined' ? '' : value} />;\n}\n\nexport default HiddenWidget;\n", "import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `PasswordWidget` component uses the `BaseInputTemplate` changing the type to `password`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function PasswordWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='password' {...props} />;\n}\n", "import { FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  enumOptionsIsSelected,\n  enumOptionsValueForIndex,\n  optionId,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction RadioWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  id,\n}: WidgetProps<T, S, F>) {\n  const { enumOptions, enumDisabled, inline, emptyValue } = options;\n\n  const handleBlur = useCallback(\n    ({ target }: FocusEvent<HTMLInputElement>) =>\n      onBlur(id, enumOptionsValueForIndex<S>(target && target.value, enumOptions, emptyValue)),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target }: FocusEvent<HTMLInputElement>) =>\n      onFocus(id, enumOptionsValueForIndex<S>(target && target.value, enumOptions, emptyValue)),\n    [onFocus, id]\n  );\n\n  return (\n    <div className='field-radio-group' id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, i) => {\n          const checked = enumOptionsIsSelected<S>(option.value, value);\n          const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;\n          const disabledCls = disabled || itemDisabled || readonly ? 'disabled' : '';\n\n          const handleChange = () => onChange(option.value);\n\n          const radio = (\n            <span>\n              <input\n                type='radio'\n                id={optionId(id, i)}\n                checked={checked}\n                name={id}\n                required={required}\n                value={String(i)}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && i === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n                aria-describedby={ariaDescribedByIds<T>(id)}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n\n          return inline ? (\n            <label key={i} className={`radio-inline ${disabledCls}`}>\n              {radio}\n            </label>\n          ) : (\n            <div key={i} className={`radio ${disabledCls}`}>\n              <label>{radio}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default RadioWidget;\n", "import { FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const {\n    value,\n    registry: {\n      templates: { BaseInputTemplate },\n    },\n  } = props;\n  return (\n    <div className='field-range-wrapper'>\n      <BaseInputTemplate type='range' {...props} />\n      <span className='range-view'>{value}</span>\n    </div>\n  );\n}\n", "import { ChangeEvent, FocusEvent, SyntheticEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  enumOptionsIndexForValue,\n  enumOptionsValueForIndex,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\nfunction getValue(event: SyntheticEvent<HTMLSelectElement>, multiple: boolean) {\n  if (multiple) {\n    return Array.from((event.target as HTMLSelectElement).options)\n      .slice()\n      .filter((o) => o.selected)\n      .map((o) => o.value);\n  }\n  return (event.target as HTMLSelectElement).value;\n}\n\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction SelectWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  schema,\n  id,\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  multiple = false,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n  placeholder,\n}: WidgetProps<T, S, F>) {\n  const { enumOptions, enumDisabled, emptyValue: optEmptyVal } = options;\n  const emptyValue = multiple ? [] : '';\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onFocus(id, enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal));\n    },\n    [onFocus, id, schema, multiple, enumOptions, optEmptyVal]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onBlur(id, enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal));\n    },\n    [onBlur, id, schema, multiple, enumOptions, optEmptyVal]\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onChange(enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal));\n    },\n    [onChange, schema, multiple, enumOptions, optEmptyVal]\n  );\n\n  const selectedIndexes = enumOptionsIndexForValue<S>(value, enumOptions, multiple);\n  const showPlaceholderOption = !multiple && schema.default === undefined;\n\n  return (\n    <select\n      id={id}\n      name={id}\n      multiple={multiple}\n      className='form-control'\n      value={typeof selectedIndexes === 'undefined' ? emptyValue : selectedIndexes}\n      required={required}\n      disabled={disabled || readonly}\n      autoFocus={autofocus}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    >\n      {showPlaceholderOption && <option value=''>{placeholder}</option>}\n      {Array.isArray(enumOptions) &&\n        enumOptions.map(({ value, label }, i) => {\n          const disabled = enumDisabled && enumDisabled.indexOf(value) !== -1;\n          return (\n            <option key={i} value={String(i)} disabled={disabled}>\n              {label}\n            </option>\n          );\n        })}\n    </select>\n  );\n}\n\nexport default SelectWidget;\n", "import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport { ariaDescribedByIds, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction TextareaWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  id,\n  options = {},\n  placeholder,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, S, F>) {\n  const handleChange = useCallback(\n    ({ target: { value } }: ChangeEvent<HTMLTextAreaElement>) => onChange(value === '' ? options.emptyValue : value),\n    [onChange, options.emptyValue]\n  );\n\n  const handleBlur = useCallback(\n    ({ target }: FocusEvent<HTMLTextAreaElement>) => onBlur(id, target && target.value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target }: FocusEvent<HTMLTextAreaElement>) => onFocus(id, target && target.value),\n    [id, onFocus]\n  );\n\n  return (\n    <textarea\n      id={id}\n      name={id}\n      className='form-control'\n      value={value ? value : ''}\n      placeholder={placeholder}\n      required={required}\n      disabled={disabled}\n      readOnly={readonly}\n      autoFocus={autofocus}\n      rows={options.rows}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    />\n  );\n}\n\nTextareaWidget.defaultProps = {\n  autofocus: false,\n  options: {},\n};\n\nexport default TextareaWidget;\n", "import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `TextWidget` component uses the `BaseInputTemplate`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TextWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate {...props} />;\n}\n", "import { useCallback } from 'react';\nimport { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `TimeWidget` component uses the `BaseInputTemplate` changing the type to `time` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TimeWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  const handleChange = useCallback((value: any) => onChange(value ? `${value}:00` : undefined), [onChange]);\n\n  return <BaseInputTemplate type='time' {...props} onChange={handleChange} />;\n}\n", "import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `URLWidget` component uses the `BaseInputTemplate` changing the type to `url`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function URLWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='url' {...props} />;\n}\n", "import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `UpDownWidget` component uses the `BaseInputTemplate` changing the type to `number`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function UpDownWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='number' {...props} />;\n}\n", "import { FormContextType, RegistryWidgetsType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nimport AltDateWidget from './AltDateWidget';\nimport AltDateTimeWidget from './AltDateTimeWidget';\nimport CheckboxWidget from './CheckboxWidget';\nimport CheckboxesWidget from './CheckboxesWidget';\nimport ColorWidget from './ColorWidget';\nimport DateWidget from './DateWidget';\nimport DateTimeWidget from './DateTimeWidget';\nimport EmailWidget from './EmailWidget';\nimport FileWidget from './FileWidget';\nimport HiddenWidget from './HiddenWidget';\nimport PasswordWidget from './PasswordWidget';\nimport RadioWidget from './RadioWidget';\nimport RangeWidget from './RangeWidget';\nimport SelectWidget from './SelectWidget';\nimport TextareaWidget from './TextareaWidget';\nimport TextWidget from './TextWidget';\nimport TimeWidget from './TimeWidget';\nimport URLWidget from './URLWidget';\nimport UpDownWidget from './UpDownWidget';\n\nfunction widgets<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryWidgetsType<T, S, F> {\n  return {\n    AltDateWidget,\n    AltDateTimeWidget,\n    CheckboxWidget,\n    CheckboxesWidget,\n    ColorWidget,\n    DateWidget,\n    DateTimeWidget,\n    EmailWidget,\n    FileWidget,\n    HiddenWidget,\n    PasswordWidget,\n    RadioWidget,\n    RangeWidget,\n    SelectWidget,\n    TextWidget,\n    TextareaWidget,\n    TimeWidget,\n    UpDownWidget,\n    URLWidget,\n  };\n}\n\nexport default widgets;\n", "import { englishStringTranslator, FormContextType, Registry, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nimport fields from './components/fields';\nimport templates from './components/templates';\nimport widgets from './components/widgets';\n\n/** The default registry consists of all the fields, templates and widgets provided in the core implementation,\n * plus an empty `rootSchema` and `formContext. We omit schemaUtils here because it cannot be defaulted without a\n * rootSchema and validator. It will be added into the computed registry later in the Form.\n */\nexport default function getDefaultRegistry<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): Omit<Registry<T, S, F>, 'schemaUtils'> {\n  return {\n    fields: fields<T, S, F>(),\n    templates: templates<T, S, F>(),\n    widgets: widgets<T, S, F>(),\n    rootSchema: {} as S,\n    formContext: {} as F,\n    translateString: englishStringTranslator,\n  };\n}\n", "import { ComponentType, ForwardedRef, forwardRef } from 'react';\nimport Form, { FormProps } from './components/Form';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The properties for the `withTheme` function, essentially a subset of properties from the `FormProps` that can be\n * overridden while creating a theme\n */\nexport type ThemeProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> = Pick<\n  FormProps<T, S, F>,\n  'fields' | 'templates' | 'widgets' | '_internalFormWrapper'\n>;\n\n/** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */\nexport default function withTheme<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  themeProps: ThemeProps<T, S, F>\n): ComponentType<FormProps<T, S, F>> {\n  return forwardRef(\n    ({ fields, widgets, templates, ...directProps }: FormProps<T, S, F>, ref: ForwardedRef<Form<T, S, F>>) => {\n      fields = { ...themeProps?.fields, ...fields };\n      widgets = { ...themeProps?.widgets, ...widgets };\n      templates = {\n        ...themeProps?.templates,\n        ...templates,\n        ButtonTemplates: {\n          ...themeProps?.templates?.ButtonTemplates,\n          ...templates?.ButtonTemplates,\n        },\n      };\n\n      return (\n        <Form<T, S, F>\n          {...themeProps}\n          {...directProps}\n          fields={fields}\n          widgets={widgets}\n          templates={templates}\n          ref={ref}\n        />\n      );\n    }\n  );\n}\n", "import Form, { FormProps, FormState, IChangeEvent } from './components/Form';\nimport withTheme, { ThemeProps } from './withTheme';\nimport getDefaultRegistry from './getDefaultRegistry';\n\nexport type { FormProps, FormState, IChangeEvent, ThemeProps };\n\nexport { withTheme, getDefaultRegistry };\nexport default Form;\n"],
  "mappings": "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",
  "names": ["unset", "import_react", "import_get", "import_isEmpty", "keyedFormData", "i", "set", "cloneDeep", "_", "formData", "get", "_jsx", "isObject", "widgets", "SchemaField", "has", "key", "import_isObject", "widgets", "isObject", "o", "v", "_jsx", "import_react", "import_get", "retrievedOptions", "formData", "schemaUtils", "widgets", "fields", "get", "omit", "_jsxs", "_jsx", "isEmpty", "import_react", "StringField", "value", "re", "_jsx", "import_react", "RuleType", "blockQuote", "breakLine", "breakThematic", "codeBlock", "codeFenced", "codeInline", "footnote", "footnoteReference", "gfmTask", "heading", "headingSetext", "htmlBlock", "htmlComment", "htmlSelfClosing", "image", "link", "linkAngleBraceStyleDetector", "linkBareUrlDetector", "linkMailtoDetector", "newlineCoalescer", "orderedList", "paragraph", "ref", "refImage", "refLink", "table", "tableSeparator", "text", "textBolded", "textEmphasized", "textEscaped", "textMarked", "textStrikethroughed", "unorderedList", "Priority", "ATTRIBUTE_TO_JSX_PROP_MAP", "reduce", "obj", "x", "toLowerCase", "for", "namedCodesToUnicode", "amp", "apos", "gt", "lt", "nbsp", "quot", "DO_NOT_PROCESS_HTML_ELEMENTS", "ATTR_EXTRACTOR_R", "AUTOLINK_MAILTO_CHECK_R", "BLOCK_END_R", "BLOCKQUOTE_R", "BLOCKQUOTE_TRIM_LEFT_MULTILINE_R", "BREAK_LINE_R", "BREAK_THEMATIC_R", "CODE_BLOCK_FENCED_R", "CODE_BLOCK_R", "CODE_INLINE_R", "CONSECUTIVE_NEWLINE_R", "CR_NEWLINE_R", "FOOTNOTE_R", "FOOTNOTE_REFERENCE_R", "FORMFEED_R", "FRONT_MATTER_R", "GFM_TASK_R", "HEADING_R", "HEADING_ATX_COMPLIANT_R", "HEADING_SETEXT_R", "HTML_BLOCK_ELEMENT_R", "HTML_CHAR_CODE_R", "HTML_COMMENT_R", "HTML_CUSTOM_ATTR_R", "HTML_SELF_CLOSING_ELEMENT_R", "INTERPOLATION_R", "LINK_AUTOLINK_BARE_URL_R", "LINK_AUTOLINK_MAILTO_R", "LINK_AUTOLINK_R", "CAPTURE_LETTER_AFTER_HYPHEN", "NP_TABLE_R", "REFERENCE_IMAGE_OR_LINK", "REFERENCE_IMAGE_R", "REFERENCE_LINK_R", "SQUARE_BRACKETS_R", "SHOULD_RENDER_AS_BLOCK_R", "TAB_R", "TABLE_TRIM_PIPES", "TABLE_CENTER_ALIGN", "TABLE_LEFT_ALIGN", "TABLE_RIGHT_ALIGN", "INLINE_SKIP_R", "TEXT_BOLD_R", "RegExp", "TEXT_EMPHASIZED_R", "TEXT_MARKED_R", "TEXT_STRIKETHROUGHED_R", "TEXT_ESCAPED_R", "TEXT_PLAIN_R", "TRIM_STARTING_NEWLINES", "HTML_LEFT_TRIM_AMOUNT_R", "UNESCAPE_URL_R", "LIST_ITEM_END_R", "LIST_LOOKBEHIND_R", "ORDERED_LIST_BULLET", "UNORDERED_LIST_BULLET", "generateListItemPrefix", "type", "ORDERED_LIST_ITEM_PREFIX", "UNORDERED_LIST_ITEM_PREFIX", "generateListItemPrefixRegex", "ORDERED_LIST_ITEM_PREFIX_R", "UNORDERED_LIST_ITEM_PREFIX_R", "generateListItemRegex", "ORDERED_LIST_ITEM_R", "UNORDERED_LIST_ITEM_R", "generateListRegex", "bullet", "ORDERED_LIST_R", "UNORDERED_LIST_R", "generateListRule", "h", "ordered", "LIST_R", "LIST_ITEM_R", "LIST_ITEM_PREFIX_R", "match", "source", "state", "prevCapture", "isStartOfLine", "exec", "list", "inline", "simple", "order", "parse", "capture", "start", "items", "replace", "lastItemWasAParagraph", "map", "item", "i", "space", "length", "spaceRegex", "content", "isLastItem", "thisItemIsAParagraph", "indexOf", "oldStateInline", "oldStateList", "adjustedContent", "result", "render", "node", "output", "key", "undefined", "LINK_R", "IMAGE_R", "NON_PARAGRAPH_BLOCK_SYNTAXES", "BLOCK_SYNTAXES", "slugify", "str", "parseTableAlignCapture", "alignCapture", "test", "parseTableRow", "tableOutput", "prevInTable", "inTable", "tableRow", "trim", "split", "nodes", "fragment", "push", "apply", "cells", "forEach", "trimEnd", "parseTable", "align", "rowText", "header", "children", "getTableStyle", "colIndex", "textAlign", "inlineRegex", "regex", "simpleInlineRegex", "blockRegex", "anyScopeRegex", "matchParagraph", "prevCapturedString", "endsWith", "every", "line", "some", "captured", "sanitizer", "url", "decodeURIComponent", "e", "unescapeUrl", "rawUrlString", "parseInline", "isCurrentlyInline", "isCurrentlySimple", "parseSimpleInline", "parseBlock", "parseCaptureInline", "captureNothing", "renderNothing", "cx", "args", "filter", "Boolean", "join", "get", "src", "path", "fb", "ptr", "frags", "shift", "compiler", "markdown", "options", "tag", "props", "overrideProps", "overrides", "createElement", "override", "_extends", "className", "compile", "input", "forceInline", "forceBlock", "arr", "emitter", "parser", "pop", "wrapper", "jsx", "forceWrapper", "attrStringToMap", "attributes", "raw", "index", "delimiterIdx", "_", "letter", "toUpperCase", "slice", "value", "first", "mappedKey", "normalizedValue", "sanitizeUrlFn", "styles", "kvPair", "substr", "cloneElement", "footnotes", "refs", "rules", "__", "lang", "attrs", "identifier", "target", "href", "completed", "checked", "readOnly", "enforceAtxHeadings", "id", "level", "whitespace", "trimmer", "trimmed", "parseFunc", "r", "tagName", "noInnerParse", "ast", "inAnchor", "alt", "title", "address", "fallbackChildren", "style", "row", "c", "full", "inner", "disableParsingRawHTML", "ruleList", "Object", "keys", "nestedParse", "ruleType", "rule", "currCaptureString", "substring", "parsed", "sort", "typeA", "typeB", "orderA", "orderB", "userRender", "renderer", "renderRule", "patchedRender", "Array", "isArray", "oldKey", "lastWasString", "nodeOut", "isString", "def", "_ref", "_excluded", "import_get", "import_isObject", "import_set", "unset", "has", "isObject", "set", "fields", "SchemaField", "_jsxs", "_jsx", "name", "get", "import_react", "import_isObject", "import_omit", "fields", "_jsx", "FieldTemplate", "FieldHelpTemplate", "FieldErrorTemplate", "formData", "id", "omit", "_jsxs", "_Fragment", "_schema", "isObject", "widgets", "_jsx", "import_react", "_jsx", "CopyButton", "MoveDownButton", "MoveUpButton", "RemoveButton", "_jsxs", "_jsx", "ArrayFieldDescriptionTemplate", "ArrayFieldItemTemplate", "ArrayFieldTitleTemplate", "AddButton", "_jsxs", "_jsx", "_jsx", "import_react", "value", "_jsxs", "_Fragment", "_jsx", "_jsx", "_jsx", "_jsx", "_jsx", "_jsxs", "_jsx", "i", "_jsxs", "_jsx", "WrapIfAdditionalTemplate", "_jsx", "_jsxs", "_jsx", "_jsx", "AddButton", "_jsxs", "_jsx", "REQUIRED_FIELD_SYMBOL", "_jsxs", "_jsx", "_jsxs", "_jsx", "templates", "RemoveButton", "_jsx", "_jsxs", "import_react", "SelectWidget", "_jsx", "value", "state", "_jsxs", "i", "AltDateWidget", "_jsx", "import_react", "_jsxs", "_jsx", "import_react", "_jsx", "_jsxs", "BaseInputTemplate", "_jsx", "import_react", "BaseInputTemplate", "_jsx", "BaseInputTemplate", "_jsx", "value", "BaseInputTemplate", "_jsx", "import_react", "_jsx", "_jsxs", "_Fragment", "RemoveButton", "e", "BaseInputTemplate", "_", "i", "_jsx", "BaseInputTemplate", "_jsx", "import_react", "_jsx", "i", "_jsxs", "BaseInputTemplate", "_jsxs", "_jsx", "import_react", "o", "_jsxs", "_jsx", "value", "i", "disabled", "import_react", "value", "_jsx", "BaseInputTemplate", "_jsx", "import_react", "BaseInputTemplate", "_jsx", "BaseInputTemplate", "_jsx", "BaseInputTemplate", "_jsx", "fields", "_pick", "_get", "_isEmpty", "_", "_jsx", "_forEach", "_isNil", "templates", "widgets", "_toPath", "SubmitButton", "_jsxs", "import_react", "fields", "widgets", "templates", "_jsx"]
}
